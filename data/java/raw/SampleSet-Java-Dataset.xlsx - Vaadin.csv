,,,,,,,Categories,,,,,,,,,,,,,,,,,,,,,,
Evaluator,Reviewer 1,Reviewer 2,Project,Class,Comment,comment length,summary,Exapnd,rational,deprecation,usage,exception,todo,Incomplete,Commented code,directive,formatter,License,Ownership,Pointer,Auto generated,Noise,Warning,Recommendation,Precondition,Coding Guidelines,Extension,Subclass explnation,Observation
E3,,E4 (agree),Vaadin,AbstractSingleComponentContainerState.java," * Default shared state implementation for AbstractSingleComponentContainer.
 *
 * @since 8.0",5,Default shared state implementation for AbstractSingleComponentContainer,,,@since 8.0,,,,,,,,,,,,,,,,,,,
E3,,E4 (agree),,ComboBoxState.java," * Shared state for the ComboBox component.
 *
 * @since 7.0",5, Shared state for the ComboBox component.,,,@since 7.0,,,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,GridManyColumnsV7.java, * Test UI for Grid initial rendering performance profiling.,3, Test UI for Grid initial rendering performance profiling,,,,,,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,NotEmptyValidatorTest.java," * @author Vaadin Ltd
 *",4,,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,E1 (agree),,,QueryBuilder.java," * @deprecated As of 8.0, no replacement available.",3,,,," @deprecated As of 8.0, no replacement available.",,,,,,,,,,,,,,,,,,,
E3,,E2 (agree),,RequiredTextFieldTest.java," * Test for .v-required style
 *
 * @author Vaadin Ltd",5, Test for .v-required style,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,SimpleGridUI.java," * @author Vaadin Ltd
 *",4,,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,VGridLayout.java,"     * Private helper class.
     | For internal use only. May be removed or replaced in the future. ",3,Private helper class.,,,,,,,,,,,,,,,, For internal use only. May be removed or replaced in the future. ,,,,,,
E3,,E4 (agree),,AdjacentElementsWithTooltipsTest.java," * Test to see if tooltips obey quickOpenDelay when moving between directly
 * adjacent elements.
 *
 * @author Vaadin Ltd",6,Test to see if tooltips obey quickOpenDelay when moving between directly adjacent elements.,,,,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E4 (disagree),,ClientRpcWriter.java," * Serializes {@link ClientRpc client RPC} invocations to JSON.
 *
 * @author Vaadin Ltd
 * @since 7.1",6, Serializes {@link ClientRpc client RPC} invocations to JSON,,,@since 7.1,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E4 (agree),,ColorPickerServerRpc.java," * RPC interface for AbstractColorPicker.
 *
 * @since 7.0.0
 *",6, * RPC interface for AbstractColorPicker.,,, * @since 7.0.0,,,,,,,,,,,,,,,,,,,
E3,E1 (disagree),,,DoubleRangeValidator.java," * Validator for validating that a {@link Double} is inside a given range.
 *
 * @author Vaadin Ltd.
 * @since 8.0",6,* Validator for validating that a {@link Double} is inside a given range.,,,@since 8.0,,,,,,,,,* @author Vaadin Ltd., Serializes {@link ClientRpc client RPC} invocations to JSON,,,,,,,,,
E3,E1 (agree),,,HeaderRow.java," * A header row in a Grid.
 *
 * @author Vaadin Ltd
 * @since 8.0",6, A header row in a Grid.,,,@since 8.0,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,SpacerVisibilityChangedEvent.java,"* Event fired when a spacer element is hidden or shown in Escalator.
 *
 * @author Vaadin Ltd
 * @since 7.7.13",6,,,Event fired when a spacer element is hidden or shown in Escalator.,@since 7.7.13,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,VTextArea.java," * This class represents a multiline textfield (textarea).
 *
 * TODO consider replacing this with a RichTextArea based implementation. IE
 * does not support CSS height for textareas in Strict mode :-(
 *
 * @author Vaadin Ltd. *",6,This class represents a multiline textfield (textarea).,,,,,,"consider ...IE
 * does not support CSS height for textareas in Strict mode :-(",,,,,,@author Vaadin Ltd.,,,,"consider ...IE
 * does not support CSS height for textareas in Strict mode :-(",,,,,,
E3,,E2 (agree),,VUpload.java," *
 * Note, we are not using GWT FormPanel as we want to listen submitcomplete
 * events even though the upload component is already detached.
 *
 * @author Vaadin Ltd
 *",6,,,,,,,,,,,,,@author Vaadin Ltd,,,," * Note, we are not using GWT FormPanel as we want to listen submitcomplete
 * events even though the upload component is already detached.",,,,,,
E3,,E4 (disagree),,AbstractFocusable.java,"* An abstract base class for focusable components. Includes API for setting the
 * tab index, programmatic focusing, and adding focus and blur listeners.
 *
 * @since 7.6
 * @author Vaadin Ltd",7,An abstract base class for focusable components.,"Includes API for setting the * tab index, programmatic focusing, and adding focus and blur listeners.",,@since 7.6,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E4 (agree),,AbstractMultiSelectState.java," * Shared state for {@code AbstractMultiSelect}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *",7,Shared state for {@code AbstractMultiSelect}.,,,@since 8.0,,,,,,,,,@author Vaadin Ltd,Shared state for {@code AbstractMultiSelect}.,,,,,,,,,
E3,,E4 (disagree),,FooterDoubleClickHandler.java," * Handler for {@link GridDoubleClickEvent}s that happen in the footer of the
 * Grid.
 *
 * @since 7.4
 * @author Vaadin Ltd",7," Handler for {@link GridDoubleClickEvent}s that happen in the footer of the
 * Grid.",,, @since 7.4,,,,,,,,,@author Vaadin Ltd,{@link GridDoubleClickEvent}s,,,,,,,,,
E3,E1 (agree),,,PortletDummyRequestHandler.java," * Request handler which provides a dummy HTML response to any resource request
 * with the resource id DUMMY.
 *
 * @author Vaadin Ltd
 * @since 7.1",7,"Request handler which provides a dummy HTML response to any resource request
 * with the resource id DUMMY.",,,@since 7.1,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,E1 (agree),,,TargetDetailsImpl.java," * A HashMap backed implementation of {@link TargetDetails} for termina...n.
 *
 * @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropEvent#getTransferData(String)}",7,A HashMap backed implementation of {@link TargetDetails} for termina...n.,,," @since 6.3
 * @deprecated Replaced in 8.1 by {@link DropEvent#getTransferData(String)}",,,,,,,,,,A HashMap backed implementation of {@link TargetDetails} for termina...n.,,,,,,,,,
E3,,E2 (agree),,UnknownExtensionConnector.java," * Connector used as a placeholder for extensions that are not present in the
 * widgetset.
 *
 * @since 7.7.4
 * @author Vaadin Ltd",7,"Connector used as a placeholder for extensions that are not present in the
 * widgetset.",,, @since 7.7.4,,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,VLazyInitItemIdentifiers.java," *
 * @author Vaadin Ltd
 * @deprecated Replaced in 8.1 with
 * ...ragOverCriteria(String)} and
 *             {@link DropTargetExtension#setDropCriteria(String)}",7,,,," @deprecated Replaced in 8.1 with
 * ...ragOverCriteria(String)} and
 *             {@link DropTargetExtension#setDropCriteria(String)}",,,,,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,XhrConnectionError.java," * XhrConnectionError provides detail about an error which occurred during an
 * XHR request to the server.
 *
 * @since 7.6
 * @author Vaadin Ltd",7,"XhrConnectionError provides detail about an error which occurred during an
 * XHR request to the server.",,,@since 7.6,,,,,,,,, @author Vaadin Ltd,,,,,,,,,,
E3,,E4 (disagree),,ApplicationConfiguration.java,"* Helper class for reading configuration options from the bootstap
     * javascript
     *
     * @since 7.0
     |
     * Wraps a native javascript object containing fields for an error message.
     *
     * @since 7.0",10,"* Helper class for reading configuration options from the bootstap.
  * Wraps a native javascript object containing fields for an error message.",,,"     * @since 7.0
@since 7.0",,,,,,,,,,,,,,,,,,,
E3,,E4 (disagree),,BootstrapPageResponse.java,"* A representation of a bootstrap page being generated. The bootstrap page
 * contains of the full DOM of the HTML document as well as the HTTP headers
 * that will be included in the corresponding HTTP response.
 *
 * @author Vaadin Ltd
 * @since 7.0.0",8,* A representation of a bootstrap page being generated. ,"The bootstrap page
 * contains of the full DOM of the HTML document as well as the HTTP headers
 * that will be included in the corresponding HTTP response.",, * @since 7.0.0,,,,,,,,, * @author Vaadin Ltd,,,,,,,,,,
E3,,E4 (disagree),,ButtonRenderer.java,"* A Renderer that displays a button with a textual caption. The value of the
 * corresponding property is used as the caption. Click listeners can be added
 * to the renderer, invoked when any of the rendered buttons is clicked.
 *
 * @since 7.4
 * @author Vaadin Ltd
",8,* A Renderer that displays a button with a textual caption.,"  The value of the
 * corresponding property is used as the caption",," * @since 7.4
","Click listeners can be added
 * to the renderer, invoked when any of the rendered buttons is clicked.",,,,,,,, * @author Vaadin Ltd,,,,,,,,,,
E3,E1 (agree),,,DeclarativeValueProvider.java,"
 * Value provider class for declarative support.
 * <p>
 * Provides a straightforward mapping between an item and its value.
 *
 * @param <T>
 *            item type
 ",8,"
 * Value provider class for declarative support. * Provides a straightforward mapping between an item and its value.",,,," * @param <T>
 *            item type",,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,InternalContainerAnnotationForJS.java,"* Annotation enabling using multiple {@link JavaScript @JavaScript}
 * annotations.
 * <p>
 * <b>NOT meant to be used</b>, for multiple JavaScript dependencies,
 * {@link JavaScript @JavaScript} should be used instead.
 *
 * @author Vaadin Ltd
 * @since 8.0",10,"* Annotation enabling using multiple {@link JavaScript @JavaScript}
 * annotations.",,, * @since 8.0,,,,,,,,, * @author Vaadin Ltd,,,," * <p>
 * <b>NOT meant to be used</b>, for multiple JavaScript dependencies,
 * {@link JavaScript @JavaScript} should be used instead.",,,,,,
E3,E1 (agree),,,MyPickerConnector.java,"* Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Widget%20styling%20using%20only%20CSS,
 * https
 * ://vaadin.com/wiki/-/wiki/Main/Lightweight%20calculations%20of%20widget%20l
 * ayout and https://vaadin.com/wiki/-/wiki/Main/Complex%20widget%20layouts
 *
 * @author Vaadin Ltd
 * @since 7.0.0",10,* Mini tutorial code for,,, * @since 7.0.0,,,,,,,,, * @author Vaadin Ltd,"* Mini tutorial code for
 * https://vaadin.com/wiki/-/wiki/Main/Widget%20styling%20using%20only%20CSS,
 * https
 * ://vaadin.com/wiki/-/wiki/Main/Lightweight%20calculations%20of%20widget%20l
 * ayout and https://vaadin.com/wiki/-/wiki/Main/Complex%20widget%20layouts
 *",,,,,,,,,
E3,,E2 (agree),,SelectAllEvent.java,"* A select all event, fired by the Grid when it needs all rows in data source
 * to be selected, OR when all rows have been selected and are now deselected.
 *
 * @since 7.4
 * @author Vaadin Ltd
 * @param <T>
 *            the type of the rows in grid",9,"* A select all event, fired by the Grid when it needs all rows in data source
 * to be selected, OR when all rows have been selected and are now deselected.
 *",,"* A select all event, fired by the Grid when it needs all rows in data source
 * to be selected, OR when all rows have been selected and are now deselected.
 *", * @since 7.4," * @param <T>
 *            the type of the rows in grid",,,,,,,, * @author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,ShouldWriteDataDelegate.java,"* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.
 *
 * @see DesignContext#shouldWriteData(Component)
 *
 * @since 7.5.0
 * @author Vaadin Ltd",9,"* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.",,"* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.", * @since 7.5.0,,,,,,,,, * @author Vaadin Ltd,"* Delegate used by {@link DesignContext} to determine whether container data
 * should be written out for a component.
 * @see DesignContext#shouldWriteData(Component)",,,,,,,,,
E3,,E4 (disagree),,AbstractProperty.java,"* Abstract base class for {@link Property} implementations.
 *
 * Handles listener management for {@link ValueChangeListener}s and
 * {@link ReadOnlyStatusChangeListener}s.
 *
 * @since 6.6
 *
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
 | LegacyPropertyHelper has been removed in Vaadin 8| Events |
     * An <code>Event</code> object specifying the Property whose read-only
     * status has been changed.
     | LegacyPropertyHelper has been removed in Vaadin 8| Events |
     * An <code>Event</code> object specifying the Property whose value has been
     * changed.
     ",17,"Abstract base class for {@link Property} implementations. * Handles listener management for {@link ValueChangeListener}s and
 * {@link ReadOnlyStatusChangeListener}s."," An <code>Event</code> object specifying the Property whose read-only
     * status has been changed.",," @since 6.6
'@deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
 | LegacyPropertyHelper has been removed in Vaadin 8| Events |",,,,,,,,,,"Handles listener management for {@link ValueChangeListener}s and
 * {@link ReadOnlyStatusChangeListener}s.
 * @deprecated As of 8.0, replaced by {@link ValueProvider}, {@link Setter}, see
 *             {@link Binder}
{@link Property} ",,, | LegacyPropertyHelper has been removed in Vaadin 8| Events |,,,,,,
E3,,E4 (disagree),,Grid.java,"* A grid component for displaying tabular data.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 || HEADER AND FOOTER||
     * A callback method for fetching items. The callback is provided with a
     * list of sort orders, offset index and limit.
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * Selection mode representing the built-in selection models in grid.
     * <p>
     * These enums can be used in {@link Grid#setSelectionMode(SelectionMode)}
     * to easily switch between the build-in selection models.
     *
     * @see Grid#setSelectionMode(SelectionMode)
     * @see Grid#setSelectionModel(GridSelectionModel)
     || HEADER AND FOOTER||
     * An event that is fired when the columns are reordered.
     || HEADER AND FOOTER||
     * An event that is fired when a column is resized, either programmatically
     * or by the user.
     || HEADER AND FOOTER||
     * An event fired when an item in the Grid has been clicked.
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * ContextClickEvent for the Grid Component.
     *
     * <p>
     * Usage:
     *
     * <pre>
     * grid.addContextClickListener(event -&gt; Notification.show(
     *         ((GridContextClickEvent&lt;Person&gt;) event).getItem() + "" Clicked""));
     * </pre>
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * An event that is fired when a column's visibility changes.
     *
     * @since 7.5.0
     || HEADER AND FOOTER||
     * A helper base class for creating extensions for the Grid component.
     *
     * @param <T>
     || HEADER AND FOOTER||
     * Class for managing visible details rows.
     *
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * This extension manages the configuration and data communication for a
     * Column inside of a Grid component.
     *
     * @param <T>
     *            the grid bean type
     * @param <V>
     *            the column value type
     |
         * behavior when parsing nested properties which may contain
         * <code>null</code> values in the property chain",70,A grid component for displaying tabular data.,,,"@since 8.0
@since 7.5.0"," @param <T>
     *            the grid bean type
Usage:
     *
     * <pre>
     * grid.addContextClickListener(event -&gt; Notification.show(
     *         ((GridContextClickEvent&lt;Person&gt;) event).getItem() + "" Clicked""));
     * </pre>
     * @param <T>
     *            the grid bean type
     || HEADER AND FOOTER||
     * An event that is fired when a column's visibility changes.
     *
     * @since 7.5.0
     || HEADER AND FOOTER||
     * A helper base class for creating extensions for the Grid component.
     *
     * @param <T>
     || HEADER AND FOOTER||
     * Class for managing visible details rows.
     *
     * @param <T>
     *            the grid bean type",,,,,,     || HEADER AND FOOTER||,,@author Vaadin Ltd,"{@link Grid#setSelectionMode(SelectionMode)}
     * @see Grid#setSelectionMode(SelectionMode)
     * @see Grid#setSelectionModel(GridSelectionModel)",,,"         * behavior when parsing nested properties which may contain
         * <code>null</code> values in the property chain",,,,,,
E3,,E4 (disagree),,GridSelectionModel.java,"* The server-side interface that controls Grid's selection state.
 * SelectionModel should extend {@link AbstractGridExtension}.
 *
 * @author Vaadin Ltd
 * @since 8.0
 *
 * @param <T>
 *            the grid bean type
 * @see AbstractSelectionModel
 * @see SingleSelectionModel
 * @see MultiSelectionModel",13,The server-side interface that controls Grid's selection state.,,,,"* @param <T>
 *            the grid bean type",,,,,,,, * @author Vaadin Ltd,"SelectionModel should extend {@link AbstractGridExtension}.' * @see AbstractSelectionModel
 * @see SingleSelectionModel
 * @see MultiSelectionModel",,,, * SelectionModel should extend {@link AbstractGridExtension}.,,,,,
E3,E1 (agree),,,PopupView.java,"
 *
 * A component for displaying a two different views to data. The minimized view
 * is normally used to render the component, and when it is clicked the full
 * view is displayed on a popup. The inner class {@link PopupView.Content} is
 * used to deliver contents to this component.
 *
 * @author Vaadin Ltd.
 | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * Used to deliver customized content-packages to the PopupView. These are
     * dynamically loaded when they are redrawn. The user must take care that
     * neither of these methods ever return null.
     | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * This event is received by the PopupVisibilityListeners when the
     * visibility of the popup changes. You can get the new visibility directly
     * with {@link #isPopupVisible()}, or get the PopupView that produced the
     * event with {@link #getPopupView()}.
     *
     | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * Defines a listener that can receive a PopupVisibilityEvent when the
     * visibility of the popup changes.
     *
     ",32," * A component for displaying a two different views to data. The minimized view
 * is normally used to render the component, and when it is clicked the full
 * view is displayed on a popup. The inner class {@link PopupView.Content} is
 * used to deliver contents to this component.","| Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * This event is received by the PopupVisibilityListeners when the
     * visibility of the popup changes. You can get the new visibility directly
     * with {@link #isPopupVisible()}, or get the PopupView that produced the
     * event with {@link #getPopupView()}.
     *
     | Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.
     |
     * Defines a listener that can receive a PopupVisibilityEvent when the
     * visibility of the popup changes.","| Constructors |
     * Methods inherited from AbstractComponentContainer. These are unnecessary
     * (but mandatory). Most of them are not supported in this implementation.",,,,,,,,,,' @author Vaadin Ltd.,,,,"     * Used to deliver customized content-packages to the PopupView. These are
     * dynamically loaded when they are redrawn. The user must take care that
     * neither of these methods ever return null.","The user must take care that
     * neither of these methods ever return null.",,,,,
E3,E1 (agree),,,RpcDataProviderExtension.java,"
 * Provides Vaadin server-side container data source to a
 * {@link com.vaadin.v7.client.connectors.GridConnector GridConnector}. This is currently
 * implemented as an Extension hardcoded to support a specific connector type.
 * This will be changed once framework support for something more flexible has
 * been implemented.
 *
 * @since 7.4
 * @author Vaadin Ltd
 *
 * @deprecated As of 8.0, no replacement available.
 |
     * Class for keeping track of current items and ValueChangeListeners.
     *
     * @since 7.6
     |
     * A class to listen to changes in property values in the Container added
     * with {@link Grid#setContainerDatasource(com.vaadin.v7.data.Container.Indexed)
     * Grid#setContainerDatasource(Container.Indexed)},
     * and notifies the data source to update the client-side representation
     * of the modified item.
     * <p>
     * One instance of this class can (and should) be reused for all the
     * properties in an item, since this class will inform that the entire row
     * needs to be re-evaluated (in contrast to a property-based change
     * management)
     * <p>
     * Since there's no Container-wide possibility to listen to any kind of
     * value changes, an instance of this class needs to be attached to each and
     * every Item's Property in the container.
     *
     * @see Grid#addValueChangeListener(com.vaadin.v7.data.Container, Object, Object)
     *      Grid#addValueChangeListener(Container, Object, Object)
     * @see Grid#valueChangeListeners
     ",35," Provides Vaadin server-side container data source to a
 * {@link com.vaadin.v7.client.connectors.GridConnector GridConnector}. This is currently
 * implemented as an Extension hardcoded to support a specific connector type.
 Class for keeping track of current items and ValueChangeListeners.",,,"@since 7.4
 @deprecated As of 8.0, no replacement available.
 @since 7.6",,,,,,,,,@author Vaadin Ltd,"     * @see Grid#addValueChangeListener(com.vaadin.v7.data.Container, Object, Object)
     *      Grid#addValueChangeListener(Container, Object, Object)
     * @see Grid#valueChangeListeners",,," * This will be changed once framework support for something more flexible has
 * been implemented. 
     * One instance of this class can (and should) be reused for all the
     * properties in an item, since this class will inform that the entire row
     * needs to be re-evaluated (in contrast to a property-based change
     * management)
     * <p>
     * Since there's no Container-wide possibility to listen to any kind of
     * value changes, an instance of this class needs to be attached to each and
     * every Item's Property in the container.",,,,,,
E3,,E2 (agree),,VaadinPortlet.java,"
 * Portlet 2.0 base class. This replaces the servlet in servlet/portlet 1.0
 * deployments and handles various portlet requests from the browser.
 *
 * @author Vaadin Ltd
 | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Base class for portlet requests that need access to HTTP servlet
     * requests.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for Liferay.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for GateIn.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * @author Vaadin Ltd
     *
     * @deprecated As of 7.0. This is no longer used and only provided for
     *             backwards compatibility. Each {@link RequestHandler} can
     *             individually decide whether it wants to handle a request or
     *             not.
     ",24," * Portlet 2.0 base class. This replaces the servlet in servlet/portlet 1.0
 * deployments and handles various portlet requests from the browser.
","Base class for portlet requests that need access to HTTP servlet.
Portlet request for Liferay.
Portlet request for GateIn.
 Portlet request for WebSphere Portal.",,"@deprecated As of 7.0. This is no longer used and only provided for
     *             backwards compatibility. Each {@link RequestHandler} can
     *             individually decide whether it wants to handle a request or
     *             not.",,,"| TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Base class for portlet requests that need access to HTTP servlet
     * requests.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for Liferay.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for GateIn.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|
     * Portlet request for WebSphere Portal.
     | TODO some parts could be shared with AbstractApplicationServlet| TODO Can we close the application when the portlet is removed? Do we know| when the portlet is removed?|",,,,,,@author Vaadin Ltd,,,,,,,,,,
E3,,E2 (agree),,VaadinServiceInitListener.java,"
 * Listener for {@link VaadinService} initialization events. The listener can
 * add listeners and request handlers the service.
 * <p>
 * Listener instances are by default discovered and instantiated using
 * {@link ServiceLoader}. This means that all implementations must have a
 * zero-argument constructor and the fully qualified name of the implementation
 * class must be listed on a separate line in a
 * META-INF/services/com.vaadin.server.VaadinServiceInitListener file present in
 * the jar file containing the implementation class.
 * <p>
 * Integrations for specific runtime environments, such as OSGi or Spring, might
 * also provide other ways of discovering listeners.
 *
 * @since 8.0
 * @author Vaadin Ltd
 ",17," * Listener for {@link VaadinService} initialization events. The listener can
 * add listeners and request handlers the service."," * Listener instances are by default discovered and instantiated using
 * {@link ServiceLoader}. This means that all implementations must have a
 * zero-argument constructor and the fully qualified name of the implementation
 * class must be listed on a separate line in a
 * META-INF/services/com.vaadin.server.VaadinServiceInitListener file present in
 * the jar file containing the implementation class.
 * Integrations for specific runtime environments, such as OSGi or Spring, might
 * also provide other ways of discovering listeners.",, @since 8.0,,,,,,,   * (non-Javadoc),,@author Vaadin Ltd,,,,,," This means that all implementations must have a
 * zero-argument constructor and the fully qualified name of the implementation
 * class must be listed on a separate line in a
 * META-INF/services/com.vaadin.server",,,,
E3,,E2 (agree),,VScrollTable.java,"
 * VScrollTable
 *
 * VScrollTable is a FlowPanel having two widgets in it: * TableHead component *
 * ScrollPanel
 *
 * TableHead contains table's header and widgets + logic for resizing,
 * reordering and hiding columns.
 *
 * ScrollPanel contains VScrollTableBody object which handles content. To save
 * some bandwidth and to improve clients responsiveness with loads of data, in
 * VScrollTableBody all rows are not necessary rendered. There are ""spacers"" in
 * VScrollTableBody to use the exact same space as non-rendered rows would use.
 * This way we can use seamlessly traditional scrollbars and scrolling to fetch
 * more rows instead of ""paging"".
 *
 * In VScrollTable we listen to scroll events. On horizontal scrolling we also
 * update TableHeads scroll position which has its scrollbars hidden. On
 * vertical scroll events we will check if we are reaching the end of area where
 * we have rows rendered and
 *
 * TODO implement unregistering for child components in Cells
 | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Simple interface for parts of the table capable of owning a context menu.
     *
     * @since 7.2
     * @author Vaadin Ltd
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Handles showing context menu on ""long press"" from a touch screen.
     *
     * @since 7.2
     * @author Vaadin Ltd
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Represents a select range of rows
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * For internal use only. May be removed or replaced in the future.
     *
     * Overwrites onBrowserEvent function on FocusableScrollPanel to give event
     * access to touchContextProvider. Has to be public to give TableConnector
     * access to the scrollBodyPanel field.
     *
     * @since 7.2
     * @author Vaadin Ltd
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Used to recall the position of an open context menu if we need to close
     * and reopen it during a row update.
     * <p>
     * For internal use only. May be removed or replaced in the future.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     | For internal use only. May be removed or replaced in the future. | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * HeaderCell that is header cell for row headers.
     *
     * Reordering disabled and clicking on it resets sorting.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * A cell in the footer.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * HeaderCell that is header cell for row headers.
     *
     * Reordering disabled and clicking on it resets sorting.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * The footer of the table which can be seen in the bottom of the Table.
     | To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * This Panel can only contain VScrollTableRow type of widgets. This
     * ""simulates"" very large table, keeping spacers which take room of
     * unrendered rows.
     *
     ",363," * VScrollTable is a FlowPanel having two widgets in it: * TableHead component *
 * ScrollPanel
 *
 * TableHead contains table's header and widgets + logic for resizing,
 * reordering and hiding columns.
 *
 * ScrollPanel contains VScrollTableBody object which handles content. To save
 * some bandwidth and to improve clients responsiveness with loads of data, in
 * VScrollTableBody all rows are not necessary rendered. There are ""spacers"" in
 * VScrollTableBody to use the exact same space as non-rendered rows would use.
 * This way we can use seamlessly traditional scrollbars and scrolling to fetch
 * more rows instead of ""paging"".","In VScrollTable we listen to scroll events. On horizontal scrolling we also
 * update TableHeads scroll position which has its scrollbars hidden. On
 * vertical scroll events we will check if we are reaching the end of area where
 * we have rows rendered and","To detect if the first visible|
     * These are used when jumping between pages when pressing Home and End
     |
     * Changes to manage mouseDown and mouseUp
     |
     * Overridden due Table might not survive of visibility change (scroll pos
     * lost). Example ITabPanel just set contained components invisible and back
     * when changing tabs.
     | Updates first visible row for the case we cannot wait|
     * This method has logic which rows needs to be requested from server when
     * user scrolls.
     |
  * This Panel can only contain VScrollTableRow type of widgets. This
     * ""simulates"" very large table, keeping spacers which take room of
     * unrendered rows.",@since 7.2,,,TODO implement unregistering for child components in Cells,,,,,,@author Vaadin Ltd,"     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     * @see
     * com.google.gwt.event.dom.client.FocusHandler#onFocus(com.google.gwt.event
     * .dom.client.FocusEvent)
     |
     * (non-Javadoc)
     *
     * @see
     * com.google.gwt.event.dom.client.BlurHandler#onBlur(com.google.gwt.event
     * .dom.client.BlurEvent)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.client.Focusable#focus()
     |
     * Handles showing context menu on ""long press"" from a touch screen.",,,,,"Has to be public to give TableConnector
     * access to the scrollBodyPanel field.",,,,
E3,,E2 (agree),,Window.java,"
 * A component that represents a floating popup window that can be added to a
 * {@link UI}. A window is added to a {@code UI} using
 * {@link UI#addWindow(Window)}.
 * <p>
 * The contents of a window is set using {@link #setContent(Component)} or by
 * using the {@link #Window(String, Component)} constructor.
 * </p>
 * <p>
 * A window can be positioned on the screen using absolute coordinates (pixels)
 * or set to be centered using {@link #center()}
 * </p>
 * <p>
 * The caption is displayed in the window header.
 * </p>
 * <p>
 * In Vaadin versions prior to 7.0.0, Window was also used as application level
 * windows. This function is now covered by the {@link UI} class.
 * </p>
 *
 * @author Vaadin Ltd.
 * @since 3.0
 | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Event which is fired when the window order position is changed.
     *
     * @see UI.WindowOrderUpdateEvent
     *
     * @author Vaadin Ltd
     *
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * An interface used for listening to Window order change events.
     *
     * @see UI.WindowOrderUpdateListener
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * An interface used for listening to Window close events. Add the
     * CloseListener to a window and
     * {@link CloseListener#windowClose(CloseEvent)} will be called whenever the
     * user closes the window.
     *
     * <p>
     * Since Vaadin 6.5, removing a window using {@link #removeWindow(Window)}
     * fires the CloseListener.
     * </p>
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Event which is fired when the mode of the Window changes.
     *
     * @author Vaadin Ltd
     * @since 7.1
     *
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * An interface used for listening to Window maximize / restore events. Add
     * the WindowModeChangeListener to a window and
     * {@link WindowModeChangeListener#windowModeChanged(WindowModeChangeEvent)}
     * will be called whenever the window is maximized (
     * {@link WindowMode#MAXIMIZED}) or restored ({@link WindowMode#NORMAL} ).
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Resize events are fired whenever the client-side fires a resize-event
     * (e.g. the browser window is resized). The frequency may vary across
     * browsers.
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Listener for window resize events.
     *
     * @see com.vaadin.ui.Window.ResizeEvent
     | ********************************************************************* |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * A {@link ShortcutListener} specifically made to define a keyboard
     * shortcut that closes the window.
     *
     * <pre>
     * <code>
     *  // within the window using helper
     *  window.setCloseShortcut(KeyCode.ESCAPE, null);
     *
     *  // or globally
     *  getUI().addAction(new Window.CloseShortcut(window, KeyCode.ESCAPE));
     * </code>
     * </pre>
     *
     ",142," * A component that represents a floating popup window that can be added to a
 * {@link UI}. A window is added to a {@code UI} using
 * {@link UI#addWindow(Window)}.","The contents of a window is set using {@link #setContent(Component)} or by
 * using the {@link #Window(String, Component)} constructor.
 * </p>
 * <p>
 * A window can be positioned on the screen using absolute coordinates (pixels)
 * or set to be centered using {@link #center()}
 * </p>
 * <p>
 * The caption is displayed in the window header.
 * </p>
 * <p>
 * In Vaadin versions prior to 7.0.0, Window was also used as application level
 * windows. This function is now covered by the {@link UI} class.
Event which is fired when the window order position is changed.
An interface used for listening to Window order change events.
  * An interface used for listening to Window close events. Add the
     * CloseListener to a window and
     * {@link CloseListener#windowClose(CloseEvent)} will be called whenever the
     * user closes the window.   * An interface used for listening to Window maximize / restore events. Add
     * the WindowModeChangeListener to a window and
     * {@link WindowModeChangeListener#windowModeChanged(WindowModeChangeEvent)}
     * will be called whenever the window is maximized (
     * {@link WindowMode#MAXIMIZED}) or restored ({@link WindowMode#NORMAL} ).  * Resize events are fired whenever the client-side fires a resize-event
     * (e.g. the browser window is resized). The frequency may vary across
     * browsers. A {@link ShortcutListener} specifically made to define a keyboard
     * shortcut that closes the window.",, * @since 3.0,"     * <pre>
     * <code>
     *  // within the window using helper
     *  window.setCloseShortcut(KeyCode.ESCAPE, null);
     *
     *  // or globally
     *  getUI().addAction(new Window.CloseShortcut(window, KeyCode.ESCAPE));
     * </code>
     * </pre>",,,,,,| ********************************************************************* |,,@author Vaadin Ltd,"     * @see com.vaadin.ui.Panel#paintContent(com.vaadin.server.PaintTarget)
     |
     * (non-Javadoc)
     *
     * @see com.vaadin.ui.Panel#changeVariables(java.lang.Object, java.util.Map)
     |
     * Event which is fired when the window order position is changed.
     *
     * @see UI.WindowOrderUpdateEvent",,,,,,,,,