Evaluator,Reviewer,Reviewer 2,Class,Comment,Comment size,Intent,Responsibilities,Collaborators,Key messages,Key implementation points,Instance variables,ReferenceToOtherResources,Subclasses Explanation,Class references,Example,Todo comments,Coding guidlines,Warnings,Discourse,Links,Extensions,Recommendations,Observations,Preconditions,Dependencies,License/copyright ,Other
E1,E2 (agree),,PPListPattern,"PPListPattern that is used to match any number of parsers. As its superclass, it cannot be used for actually parsing something.",1,,"PPListPattern that is used to match any number of parsers.As its superclass, it cannot be used for actually parsing something.",,,,,,"As its superclass, it cannot be used for actually parsing something.",,,,,"As its superclass, it cannot be used for actually parsing something.",,,,,,,,,
E2,,E3 (agree),PPNonEmptyParser,"I return failure, if the delegate parser did not consumed any input.",1,,"I return failure, if the delegate parser did not consumed any input.",,,,,,,,,,,,,,,,,,,,
E3,,E1 (disagree),PPScriptingTest,"These are some simple demo-scripts of parser combinators for the compiler construction course.
http://www.iam.unibe.ch/~scg/Teaching/CC/index.html",2,These are some simple demo-scripts of parser combinators ,,,,,,"These are some simple demo-scripts of parser combinators for the compiler construction course.
http://www.iam.unibe.ch/~scg/Teaching/CC/index.html",,,,,,,,http://www.iam.unibe.ch/~scg/Teaching/CC/index.html,,,,,,,
E1,E2 (agree),,PPXPathFilter,"I'm a node filter. 
A xpath node applies me to filter xml elements. ",2,I'm a node filter. ,A xpath node applies me to filter xml elements. ,,,,,,,,,,,,,,,,,,,,
E2,,E3 (agree),PPRelativePositionStream,"A PPRelativePositionStream is a specialized stream to get the relative position according to another stream.

Instance Variables",3,A PPRelativePositionStream is a specialized stream to get the relative position according to another stream.,A PPRelativePositionStream is a specialized stream to get the relative position according to another stream.,,,,,,,,,,,,,,,,,,,,
E3,,E1 (agree),PPParserReplaceRule,"PPParserReplaceRule replaces a matched grammar with another grammar, which may include patterns from the matching grammar.

Instance Variables:
        replaceParser        <PPParser>        The parser to replace the matched parser with.",4,,"PPParserReplaceRule replaces a matched grammar with another grammar, which may include patterns from the matching grammar.",,,,"
Instance Variables:
        replaceParser        <PPParser>        The parser to replace the matched parser with.",,,,,,,,,,,,,,,,
E1,E2 (agree),,PPPluggableParser,"A pluggable parser that passes the parser stream into a block. This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.

Instance Variables:
        block        <BlockClosure>        The pluggable one-argument block.
",5,A pluggable parser ,"that passes the parser stream into a block. This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.
","This enables users to perform manual parsing or to embed other parser frameworks into PetitParser.
",,,"
Instance Variables:
        block        <BlockClosure>        The pluggable one-argument block.",,," PetitParser.
",,,,,,,,,,,,,
E2,,E3 (agree),PPLiteralParser,"Abstract literal parser that parses some kind of literal type (to be specified by subclasses).

Instance Variables:
	literal	<Object>	The literal object to be parsed.
	message	<String>	The error message to be generated.",6,"""Abstract literal parser that parses some kind of literal type (to be specified by subclasses).",,"""Abstract literal parser that parses some kind of literal type (to be specified by subclasses).",,,"
Instance Variables:
	literal	<Object>	The literal object to be parsed.
	message	<String>	The error message to be generated.""",,,,,,,,,,,,,,,,
E3,,E1 (agree),PPDebugParser,"A PPDebugParser is  a parser that traces all the progress and returns special object that can be browsed to see how the parsing advanced over a time.

Used by adding enableDebug before parsing.

Instance Variables
        root:                result of root parser

root
        - xxxxx",9,A PPDebugParser is  a parser ,A PPDebugParser is  a parser that traces all the progress and returns special object that can be browsed to see how the parsing advanced over a time.,Used by adding enableDebug before parsing.,"
root
        - xxxxx",,"

Instance Variables
        root:                result of root parser",,,,,,,,,,,,,,,,
E1,E2 (agree),,PPInfo,"A PPInfo represent the informations around a parsing result and also contain this result. It is usefull to get parsing evaluation and stream position.

Instance Variables
        element:                <Object>
        start:                <Object>
        stop:                <Object>

element
        - xxxxx

start
        - xxxxx

stop
        - xxxxx",15,A PPInfo represent the informations around a parsing result and also contain this result, It is usefull to get parsing evaluation and stream position.,,,,"Instance Variables
        element:                <Object>
        start:                <Object>
        stop:                <Object>

element
        - xxxxx

start
        - xxxxx

stop
        - xxxxx",,,,,,,,,,,,,,,,
E2,,E3(disagree),PPSea,"A PPIsland allows for imprecise parsing. One can create it on a parser p by calling: 'p island' E.g.:

p := x, a island, y              accepts following inputs:
x.....a.....b 
xab

yet fails on:
x....a....c
xb
xac
x..b....a....b

The input represented by dots is called water and water can appear before and after the island. Use it, if you don't want to define all the grammar rules and you want to skip something.

I am still an experiment, but if you know how to improve me, please contact Jan Kurs at: kurs@iam.unibe.ch

Instance Variables
        afterWaterParser:                <Object>
        awp:                <Object>
        beforeWaterParser:                <Object>
        bwp:                <Object>
        context:                <Object>
        island:                <Object>

afterWaterParser
        - xxxxx

awp
        - xxxxx

beforeWaterParser
        - xxxxx

bwp
        - xxxxx

context
        - xxxxx

island
        - xxxxx",41,,"""A PPIsland allows for imprecise parsing. One can create it on a parser p by calling: 'p island' E.g.:",,"
afterWaterParser
        - xxxxx

awp
        - xxxxx

beforeWaterParser
        - xxxxx

bwp
        - xxxxx

context
        - xxxxx

island
        - xxxxx""",,"
Instance Variables
        afterWaterParser:                <Object>
        awp:                <Object>
        beforeWaterParser:                <Object>
        bwp:                <Object>
        context:                <Object>
        island:                <Object>

afterWaterParser
        - xxxxx

awp
        - xxxxx

beforeWaterParser
        - xxxxx

bwp
        - xxxxx

context
        - xxxxx

island
        - xxxxx""",,,,"
p := x, a island, y              accepts following inputs:
x.....a.....b 
xab

yet fails on:
x....a....c
xb
xac
x..b....a....b

The input represented by dots is called water and water can appear before and after the island. Use it, if you don't want to define all the grammar rules and you want to skip something.

I am still an experiment, but if you know how to improve me, please contact Jan Kurs at: kurs@iam.unibe.ch",,,,"I am still an experiment, but if you know how to improve me, please contact Jan Kurs at: kurs@iam.unibe.ch",,,,,,,,