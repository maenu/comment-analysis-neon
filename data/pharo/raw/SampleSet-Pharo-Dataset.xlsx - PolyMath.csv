Evaluator,Reviewer,Reviewer 2,Class,Comment,Comment size,Intent,Responsibilities,Collaborators,Key messages,Key implementation points,Instance variables,ReferenceToOtherResources,Subclasses Explanation,Class references,Example,Todo comments,Coding guidlines,Warnings,Discourse,Links,Extensions,Recommendations,Observations,Preconditions,Dependencies,License/copyright ,Other
E1,E2 (agree),,PMAccuracy,Accuracy is a framework for testing the numerical accuracy of the results of methods.,1,Accuracy is a framework for,for testing the numerical accuracy of the results of methods.,,,,,,,,,,,,,,,,,,,,
E1,,E3 (agree),PMImplicitAnnouncer,An ImplicitAnnouncer is used by ODESolver to announce step results (ImplicitSolverAnnouncement).,1,An ImplicitAnnouncer is used by ODESolver to announce step results (ImplicitSolverAnnouncement).,,An ImplicitAnnouncer is used by ODESolver to announce step results (ImplicitSolverAnnouncement).,,,,,,"ODESolver
ImplicitSolverAnnouncement",,,,,,,,,,,,,
E2,,E1 (agree),PMSciKitLearnSVDFlipAlgorithmTest,This is the test class that exercises scikit-learn Eigenvector Flip Algorithm,1,This is the test class that exercises scikit-learn Eigenvector Flip Algorithm,This is the test class that exercises scikit-learn Eigenvector Flip Algorithm,,,,,,,,,,,,,,,,,,,,
E2,,E3 (agree),PMBernoulliGeneratorTest,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,1,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,A BernoulliGeneratorTest is a test class for testing the behavior of BernoulliGenerator,,,,,,BernoulliGenerator,,,,,,,,,,,,,
E3,E2 (agree),,PMAdditionalTest,"here are tests that would be in Math-Tests-DHB-Numerical, if it could construct random matrices",1,,"here are tests that would be in Math-Tests-DHB-Numerical, if it could construct random matrices",,,,,,,,,,,,,,,,,,,,
E3,,E1 (agree),PMQuantileTest,"QuantileTest tests mainly '#quantile: method:' by calculating quartiles with every method on SortedCollections of size 4, 5, 6 and 11.",1,,,,,"QuantileTest tests mainly '#quantile: method:' by calculating quartiles with every method on SortedCollections of size 4, 5, 6 and 11.",,,,,,,,,,,,,,,,,
E1,E2 (agree),,PMHyperDualNumber,"PMHyperDualNumbers can be used to additionally calculate second order derivatives.
They can be mixed with Numbers, not with PMDualNumbers.",2,,"PMHyperDualNumbers can be used to additionally calculate second order derivatives.They can be mixed with Numbers, not with PMDualNumbers.",,,,,,,,,,,,,,,"They can be mixed with Numbers, not with PMDualNumbers.",,,,,
E1,,E3 (agree),PMAM3Stepper,"It is stepper for Adams - Moulton method of order 3.
An s-step Adams - Moulton method can reach order s+1.
We can't use AM3 method until we have old solution value and approximate new one. A  AM3 method is implicit.",3,It is stepper for Adams - Moulton method of order 3.," An s-step Adams - Moulton method can reach order s+1. 
A  AM3 method is implicit.",,,,,,,,,,,We can't use AM3 method until we have old solution value and approximate new one.,,,,,,We can't use AM3 method until we have old solution value and approximate new one.,,,
E2,,E1 (agree),PMStateTime,"A StateTime class is a generalization of point. It holds both a state and a time.

We don't want to  use Point, since state may be a vector quantity, and the behavior of array @ number is a little off (it stores points in an array, what we want is the array itself in state, and the scalar quantity in time).",3,"""A StateTime class is a generalization of point. ",It holds both a state and a time. ,,,"We don't want to use Point, since state may be a vector quantity, and the behavior of array @ number is a little off (it stores points in an array, what we want is the array itself in state, and the scalar quantity in time).""",,,,,,,,,,,,,,,,,
E2,,E3 (agree),PMGradient,"Computes the gradient of a function of a Collection of Numbers.

Example: f(x,y)=x^2 * y
g := PMGradient of:[:x|x first squared * x second].
g value:#(3 2). ""-->#(12 9)"" 
g value:#(1 1). ""-->#(2 1)"" ",6,,"""Computes the gradient of a function of a Collection of Numbers.
",,,,,,,,"
Example: f(x,y)=x^2 * y
g := PMGradient of:[:x|x first squared * x second].
g value:#(3 2). """"-->#(12 9)"""" 
g value:#(1 1). """"-->#(2 1)"""" """,,,,,,,,,,,,
E3,E2 (agree),,PMMatrix,"I represent a mathematical matrix. I can be build from rows as follows: 

[[[ 
PMMatrix rows: #((1 2 3)(4 5 6)).
]]]

I understand the usual matrix operations.",7,I represent a mathematical matrix.,,,"
I understand the usual matrix operations.",,,,,,"I can be build from rows as follows: 

[[[ 
PMMatrix rows: #((1 2 3)(4 5 6)).
]]]",,,,,,,,,,,,
E3,,E1 (agree),PMODESolver,"An ODE Solver uses a Stepper to solve a System. 

The main interface once the solver is set up (it has a stepper and a solver) is
        solve: system x0: aState t0: startTime t1: endTime
        solve: system x0: aState t0: startTime t1: endTime stepSize: dt
        
Announcements are made when a step is taken.",7,,,An ODE Solver uses a Stepper to solve a System. ,"
The main interface once the solver is set up (it has a stepper and a solver) is
        solve: system x0: aState t0: startTime t1: endTime
        solve: system x0: aState t0: startTime t1: endTime stepSize: dt",Announcements are made when a step is taken.,,,,,,,,,,,,,,,,,
E1,E2 (agree),,PMStepper,"Basic steppers execute one timestep of a specific order with a given stepsize.

From odeint-v2 documentation:

Solving ordinary differential equation numerically is usually done iteratively, that is a given state of an ordinary differential equation is iterated forward x(t) -> x(t+dt) -> x(t+2dt). Steppers perform one single step. The most general stepper type is described by the Stepper concept.

Before calling doStep, it is important to associate the stepper with a system. The class method onSystem will assign the system to the Stepper.

",9,Basic steppers,Basic steppers execute one timestep of a specific order with a given stepsize.,The most general stepper type is described by the Stepper concept.,. The class method onSystem will assign the system to the Stepper.,"Solving ordinary differential equation numerically is usually done iteratively, that is a given state of an ordinary differential equation is iterated forward x(t) -> x(t+dt) -> x(t+2dt). Steppers perform one single step. ",,"From odeint-v2 documentation:

Solving ordinary differential equation numerically is usually done iteratively, that is a given state of an ordinary differential equation is iterated forward x(t) -> x(t+dt) -> x(t+2dt). Steppers perform one single step. The most general stepper type is described by the Stepper concept.",,,,,,,,,,,,"
Before calling doStep, it is important to associate the stepper with a system. ",,,
E1,,E3 (agree),PMKolmogorovSmirnov1Sample,"does a two-sided Kolmogorov-Smirnow test and checks whether sample data are from a population with a given distribution. you have to set the data that can be any collection of numbers and the cumulative distribution function. you can do the last one in two ways, either  by specifying a block via #cdf: or by specifying a distribution with concrete parameters via #populationDistribution: .
#ksStatistic returns kolmogorovs D, calculated as the maximum of D+ and D- , iow it does not (!) use D = max( | F(y(i)) - i/n| ) . (see eg http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm  why this would be wrong.)
#pValue returns the probability of getting a D <= ksStatistic .
#rejectEqualityHypothesisWithAlpha: does what its name says of course.
example:
nd:= DhbNormalDistribution new.""--> Normal distribution( 0, 1)""
ks :=KolmogorovSmirnov  compareData: ((1 to:100) collect:[:i|nd random]) withDistribution: nd.""--> 
a KolmogorovSmirnov(dataSize: 100 cdf: distributionValue of Normal distribution( 0, 1))""
ks rejectEqualityHypothesisWithAlpha: 0.05.""--> false""

",11,,does a two-sided Kolmogorov-Smirnow test and checks whether sample data are from a population with a given distribution,,"#ksStatistic returns kolmogorovs D, calculated as the maximum of D+ and D- , iow it does not (!) use D = max( | F(y(i)) - i/n| ) . (see eg http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm  why this would be wrong.)
#pValue returns the probability of getting a D <= ksStatistic .
#rejectEqualityHypothesisWithAlpha: does what its name says of course.",,, (see eg http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm  why this would be wrong.),,,"you can do the last one in two ways, either  by specifying a block via #cdf: or by specifying a distribution with concrete parameters via #populationDistribution: .
example:
nd:= DhbNormalDistribution new.""--> Normal distribution( 0, 1)""
ks :=KolmogorovSmirnov  compareData: ((1 to:100) collect:[:i|nd random]) withDistribution: nd.""--> 
a KolmogorovSmirnov(dataSize: 100 cdf: distributionValue of Normal distribution( 0, 1))""
ks rejectEqualityHypothesisWithAlpha: 0.05.""--> false""",,,you have to set the data that can be any collection of numbers and the cumulative distribution function.,why this would be wrong.),http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm ,,,,you have to set the data that can be any collection of numbers and the cumulative distribution function.,,,
E2,,E1 (agree),PMExponentialGenerator,"A PMExponentialGenerator uses a uniform random variable in [0,1] to sample from an exponential distribution.

The exponential distribution has a single parameter beta, here denoted as mean. 

The default RandomGenerator is PMRandom, but can be modified.

The next method uses the formula:

x=  - \beta * ln (1 - u)

to generate an exponential sample x from a uniform [0,1] sample u.

(Applied Statistics 3rd ed., Ledolter and Hogg, p. 185)",13,"""A PMExponentialGenerator uses a uniform random variable in [0,1] to sample from an exponential distribution.","The exponential distribution has a single parameter beta, here denoted as mean. ",,"The default RandomGenerator is PMRandom, but can be modified.","The next method uses the formula:

x=  - \beta * ln (1 - u)

to generate an exponential sample x from a uniform [0,1] sample u.

",,"(Applied Statistics 3rd ed., Ledolter and Hogg, p. 185)""",,,,,,,,,,,,,,,
E2,,E3 (disagree),PMLineSearch,"I implement line search algorithm to find the minimum of a function g(x) >= 0 on the interval 0 < x < 1.
The method is initialized by g(0), g(1) and g'(0).
The step from x = 0 to x = 1 suppose to minimize g(x) (i.e. g'(0) < 0), but due to nonlinearity of g(x) might fail to do so.
In this case, this method finds such an x that this function is minimized in the sense:

g(x) <= g(0) + alpha g'(0)

for some small alpha (defaults to 1e-4).

Usage

For once off use: 

          (PMLineSearch function:  funBlock valueAtZero: g0  derivativeAtZero: dg0  valueAtOne: g1 ) evaluate.

where funBlock is the implementation of g(x), g0 = g(0), dg0 = g'(0) and g1 = g(0).

For repeated use:

            storedMethod := DhbLineSearch new.
           storedMethod setFunction: funBlock.
           storedMethod setValueAtZero: g0 derivativeAtZero: dg0  valueAtOne: g1.
           storedMethod evaluate. 
 
!!! Optimization tip!!!

It is guaranteed that g(x) will be called on the resulting x.

See DhbNewtonZeroFinder (PMNewtonZeroFinder) that uses this to minimize the number of function evaluations.",29,"""I implement line search algorithm to find the minimum of a function g(x) >= 0 on the interval 0 < x < 1.","""I implement line search algorithm to find the minimum of a function g(x) >= 0 on the interval 0 < x < 1.
The method is initialized by g(0), g(1) and g'(0).",,,"
The step from x = 0 to x = 1 suppose to minimize g(x) (i.e. g'(0) < 0), but due to nonlinearity of g(x) might fail to do so.
In this case, this method finds such an x that this function is minimized in the sense:

g(x) <= g(0) + alpha g'(0)

for some small alpha (defaults to 1e-4).

!!! Optimization tip!!!

It is guaranteed that g(x) will be called on the resulting x.

See DhbNewtonZeroFinder (PMNewtonZeroFinder) that uses this to minimize the number of function evaluations.""",,"See DhbNewtonZeroFinder (PMNewtonZeroFinder) that uses this to minimize the number of function evaluations.""",,,"
Usage

For once off use: 

          (PMLineSearch function:  funBlock valueAtZero: g0  derivativeAtZero: dg0  valueAtOne: g1 ) evaluate.

where funBlock is the implementation of g(x), g0 = g(0), dg0 = g'(0) and g1 = g(0).

For repeated use:

            storedMethod := DhbLineSearch new.
           storedMethod setFunction: funBlock.
           storedMethod setValueAtZero: g0 derivativeAtZero: dg0  valueAtOne: g1.
           storedMethod evaluate. 
 ",,,,,,,,,,,,
E3,E2 (agree),,PMSingularValueDecompositionTest,"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:

For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".

For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.

For the Collaborators Part: State my main collaborators and one line about how I interact with them. 

Public API and Key Messages
- message one   
- message two 
- (for bonus points) how to create instances.

   One simple example is simply gorgeous.
 
Internal Representation and Key Implementation Points.

    Instance Variables
        ones:                <Object>
        randomMatrix:                <Object>
        s_matrix:                <Object>
        u:                <Object>
        v:                <Object>


    Implementation Points",26,,,,,,"
    Instance Variables
        ones:                <Object>
        randomMatrix:                <Object>
        s_matrix:                <Object>
        u:                <Object>
        v:                <Object>",,,,,"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:

For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".

For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.

For the Collaborators Part: State my main collaborators and one line about how I interact with them. 

Public API and Key Messages
- message one   
- message two 
- (for bonus points) how to create instances.

   One simple example is simply gorgeous.
 
Internal Representation and Key Implementation Points.

    Implementation Points",,,,,,,,,,,