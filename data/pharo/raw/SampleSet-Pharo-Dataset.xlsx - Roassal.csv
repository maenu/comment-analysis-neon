Evaluator,Reviewer,Reviewer 2,class,Comment,Comment size,Intent,Responsibilities,Collaborators,Key messages,Key implementation points,Instance variables,ReferenceToOtherResources,Subclasses Explanation,Class references,Example,Todo comments,Coding guidlines,Warnings,Discourse,Links,Extensions,Recommendations,Observations,Preconditions,Dependencies,License/copyright ,Other
E1,E2 (agree),,RTHistogramSet,The histogram gives you a distribution frequency over the points given. Frequency on y and a collection of values per bars on x.  ,1,,The histogram gives you a distribution frequency over the points given. Frequency on y and a collection of values per bars on x.  ,,,,,,,,,,,,,,,,,,,,
E1,E2 (agree),,RTAbstractStackedDataSet,A data set is a set of points intended to be charted. A data set has to be added to a RTGrapher.  Look at the class comment of my subclasses for detail.,1,A data set is a set of points intended to be charted,,A data set has to be added to a RTGrapher. ,,,, Look at the class comment of my subclasses for detail.,,,,,,,,,,,,A data set has to be added to a RTGrapher. ,,,
E1,E2 (agree),,RTSVGVisitor2Test,I am a simple test class for RTSVGVisitor2,1,I am a simple test class for RTSVGVisitor2,,,,,,,,RTSVGVisitor2,,,,,,,,,,,,,
E1,,E3 (agree),MorphicRoassalAdapter,I am bridging RoassalModel and RTView,1,,I am bridging RoassalModel and RTView,I am bridging RoassalModel and RTView,,,,,,"RoassalModel
RTView",,,,,,,,,,,,,
E1,,E3 (agree),RTEllipseTest,A RTEllipseTest is a test class for testing the behavior of RTEllipse,1,A RTEllipseTest is a test class, for testing the behavior of RTEllipse,,,,,,,,,,,,,,,,,,,,
E1,,E3 (agree),RTSVGBitmap,"NOT WORKING, REFRAIN FROM USAGE",1,,,,,,,,,,,,,"NOT WORKING, REFRAIN FROM USAGE",,,,,,,,,
E1,E2 (agree),,RTDualAttachPoint,I am a new class to combine attach points,1,I am a new class, to combine attach points,,,,,,,,,,,,,,,,,,,,
E2,,E1 (agree),RTAttachPoint,I am the superclass of the class hierarchy describing attach points. An attach point indicates where lines start and end. ,1,I am the superclass of the class hierarchy describing attach points.,An attach point indicates where lines start and end.,,,,,,,,,,,,,,,,,,,,
E2,,E1 (agree),RTHorizontalData,RTData renders bars and dots in vertical way,1,,RTData renders bars and dots in vertical way,,,,,,,,,,,,,,,,,,,,
E2,,E1 (agree),RTPlatformPopup,I am a basic class to have the platform popup instead of the roassal popup (RTPopup),1,I am a basic class to have the platform popup instead of the roassal popup (RTPopup),,,,,,,,,,,,,,,,,,,,,
E2,,E3 (agree),RTLinePathBuilder,An interpolator a way to create lines in SVG,1,,An interpolator a way to create lines in SVG,,,,,,,,,,,,,,,,,,,,
E2,,E3 (agree),RTCircleTree,I am a class helper to do the layout in RTCircularTreeMapBuilder,1,I am a class helper ,to do the layout in RTCircularTreeMapBuilder,RTCircularTreeMapBuilder,,,,,,,,,,,,,,,,,,,
E2,,E3 (agree),GLMRoassal2MorphicTest,A GLMRoassalMorphicTest is xxxxxxxxx.,1,A GLMRoassalMorphicTest is xxxxxxxxx.,,,,,,,,,,,,,,,,,,,,,
E2,,E1 (agree),RTTabTable,RTTabTable is made to work with CSV file contents.,1,,RTTabTable is made to work with CSV file contents.,,,,,,,,,,,,,,,,,,,,
E2,,E3 (disagree),RTDecoratedTest,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,1,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,A RTDecoratedTest is a test class for testing the behavior of RTDecorated,,,,,,,,,,,,,,,,,,,
E3,E2 (agree),,RTTextPath,I am a simple class to generate text in roassal with Athens cairo that uses the textPathCommand from roassal,1,I am a simple class to generate text in roassal,generate text in roassal,with Athens cairo that uses the textPathCommand from roassal,,,,,,,,,,,,,,,,,,,
E3,E2 (agree),,RTAxisRenderer,A RTAxisRenderer is a renderer for axis. It simply render in a view an axis configuration,1,A RTAxisRenderer is a renderer for axis.,It simply render in a view an axis configuration,A RTAxisRenderer is a renderer for axis. It simply render in a view an axis configuration,,,,,,,,,,,,,,,,,,,
E3,E2 (agree),,RTTimelineSetTest,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,1,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,A RTTimeLineSetTest is a test class for testing the behavior of RTTimeLineSet,,,,,,RTTimeLineSet,,,,,,,,,,,,,
E3,E2 (agree),,RTBucketColor,A scale of elements is discretized into buckets where elements of each bucket is associated to an element. The buckets are formed by creating partitions uniformly.,1,,A scale of elements is discretized into buckets where elements of each bucket is associated to an element. The buckets are formed by creating partitions uniformly.,,,,,,,,,,,,,,,,,,,,
E3,,E1 (disagree),RTEditableLabel,"I am a class to create editable label shapes, but do not forget that roassal is for visualizations not to build morphs",1,I am a class to create editable label shapes,", but do not forget that roassal is for visualizations not to build morphs",,,,,,,,,,,but do not forget that roassal is for visualizations not to build morphs,,,,,,,,,
E3,,E1 (agree),RTScale,A class to have nice scales checks subclasses,1,A class to have nice scales,,,,,,checks subclasses,,,,,,,,,,,,,,,
E3,,E1 (agree),RTAbout,I am a class that display general information about Roassal,1,,I am a class that display general information about Roassal,,,,,,,,,,,,,,,,,,,,
E3,,E1 (agree),RTTreeMapExampleTODELETE,Examples of RTTreeMap,1,Examples of RTTreeMap,,,,,,,,RTTreeMap,,,,,,,,,,,,,
E1,E2 (agree),,RTRotatedLabel,"A RTRotatedLabel describes rotated labels.

| v shape es |
v := RTView new.
shape := RTRotatedLabel new text: [ :c | 'Class ', c name ]; angleInDegree: [ :c | c numberOfMethods \\ 360 ].
es := shape elementsOn: Collection withAllSubclasses.
RTGridLayout on: es.
v addAll: es.
v open",9,,A RTRotatedLabel describes rotated labels.,,,,,,,,"| v shape es |
v := RTView new.
shape := RTRotatedLabel new text: [ :c | 'Class ', c name ]; angleInDegree: [ :c | c numberOfMethods \\ 360 ].
es := shape elementsOn: Collection withAllSubclasses.
RTGridLayout on: es.
v addAll: es.
v open",,,,,,,,,,,,
E1,E2 (agree),,RTExploraBuilderTest,"A ROExploraBuilderTest is xxxxxxxxx.

Instance Variables
        builder:                <Object>

builder
        - xxxxx",7,A ROExploraBuilderTest is xxxxxxxxx.,,,,,"Instance Variables
        builder:                <Object>
builder
        - xxxxx",,,,,,,,,,,,,,,,
E1,E2 (agree),,RTSVGBoxedTextPopup,"A RTSVGBoxedTextPopup is a text popup, contained in a square box.

This boxing, in SVG, supports many features, not included in this class.
",4,"A RTSVGBoxedTextPopup is a text popup, contained in a square box.","
This boxing, in SVG, supports many features, not included in this class.",,,,,,,,,,,,,,,,,,,,
E1,E2 (agree),,RTAbstractTreeBuilder,"I am a base class for some builders of roassal like:

RTTreeMapBuilder
RTCircularTreeMapBuilder
RTBundleBuilder
RTSunburstBuilder",6,I am a base class for some builders of roassal like:,,"I am a base class for some builders of roassal like:

RTTreeMapBuilder
RTCircularTreeMapBuilder
RTBundleBuilder
RTSunburstBuilder",,,,,,"

RTTreeMapBuilder
RTCircularTreeMapBuilder
RTBundleBuilder
RTSunburstBuilder",,,,,,,,,,,,,
E1,,E3 (agree),RTSVGPopup,"A RTSVGPopup is any kind of popup born from a certain element.

The click refers to the posibility of activating the popup only when the element is clicked. This is disabled by default.",3,A RTSVGPopup is any kind of popup born from a certain element.,The click refers to the posibility of activating the popup only when the element is clicked. This is disabled by default.,,,,,,,,,,,This is disabled by default.,,,,,,The click refers to the posibility of activating the popup only when the element is clicked. ,,,
E1,,E3 (agree),RTResizeCanceled,"I am fired when Resize operation is canceled globally for the whole View.

!! Collaborators

DCRTResizable",5,,I am fired when Resize operation is canceled globally for the whole View.,"!! Collaborators

DCRTResizable",,,,,,,,,,,,,,,,I am fired when Resize operation is canceled globally for the whole View.,,,
E1,,E3 (disagree),RTLinkView,"I allow to export several views

for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser

RTLinkView works with RTHTML5Exporter and
RTSVGExporter",6,,I allow to export several views,"

RTLinkView works with RTHTML5Exporter and
RTSVGExporter",,,,,,"RTLinkView works with RTHTML5Exporter and
RTSVGExporter","for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser.",,,,,,,"
for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser","
for instance if in your visualization RTView, you have elements that have visualizalitations you can use it to explore it in a web browser",,,,
E2,,E1 (disagree),RTCircleGeometry,"I represent a circle described by its 'center ' and a 'radius'.

I am NOT a Roassal shape, for that use RTEllipse. Instead I am using in some circle-related gemetric computations.",3,"""I represent a circle described by its 'center ' and a 'radius'.

I am NOT a Roassal shape, for that use RTEllipse. ","Instead I am using in some circle-related gemetric computations.""",,,,,,,,,,,"I am NOT a Roassal shape, for that use RTEllipse.",,,,"I am NOT a Roassal shape, for that use RTEllipse.",,,,,
E2,,E1 (agree),RTSVGAbstractLine,"A RTSVGAbstractLine refers to the common interface for both regular SVG lines and bezier lines (as paths).

The decoration refers to the Maker of the Line.",3,"""A RTSVGAbstractLine refers to the common interface for both regular SVG lines and bezier lines (as paths).

The decoration refers to the Maker of the Line.""",,,,,,,,,,,,,,,,,,,,,
E2,,E1 (agree),RTSunburstBuilder,"I am a class to create visualizations about rings, center is the root of the tree and arcs are the sub trees.

You can customize the angle of the arc, and play with the with radius and width of each arc.",3,"""I am a class to create visualizations about rings, center is the root of the tree and arcs are the sub trees.","""I am a class to create visualizations about rings, center is the root of the tree and arcs are the sub trees.

You can customize the angle of the arc, and play with the with radius and width of each arc.""",,,,,,,,,,,,,,,,,,,,
E2,,E3 (agree),RTBox,"A RTBox is a rectangular box. E.g.,

| v |
v := RTView new.
v add: (RTBox new width: 10; height: 20) element.
v open",6,"""A RTBox is a rectangular box. ",,,,,,,,,"E.g.,

| v |
v := RTView new.
v add: (RTBox new width: 10; height: 20) element.
v open""",,,,,,,,,,,,
E2,,E3 (disagree),RTSmoothLayoutTranslator,"A ROSmoothLayoutTranslator is xxxxxxxxx.

Instance Variables
        move:                <Object>
        nbCycles:                <Object>

move
        - xxxxx

nbCycles
        - xxxxx",11,A ROSmoothLayoutTranslator is xxxxxxxxx.,,,"move
        - xxxxx

nbCycles
        - xxxxx",,"
Instance Variables
        move:                <Object>
        nbCycles:                <Object>

move
        - xxxxx

nbCycles
        - xxxxx",,,,,,,,,,,,,,,,
E2,,E3 (agree),RTWeightedCircleLayout,"RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small elements.

Here is an example:
-=-=-=-=-=-=-=-=-=-=-=-=
v := RTView new.
elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).
v addAll: elements.
RTWeightedCircleLayout on: elements.
v
-=-=-=-=-=-=-=-=-=-=-=-=",10,RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small ,RTWeightedCircleLayout is a circle layout that gives more space to big elements and fewer space to small elements.,,,,,,,,"
Here is an example:
-=-=-=-=-=-=-=-=-=-=-=-=
v := RTView new.
elements := (RTEllipse new size: 5; color: Color red; size: [:vv | vv * 4 ]) elementsOn: (1 to: 15).
v addAll: elements.
RTWeightedCircleLayout on: elements.
v
-=-=-=-=-=-=-=-=-=-=-=-=",,,,,,,,,,,,
E2,,E1 (agree),RTGrapherSelectRangeViewContext,"Define a range for GT

-=-=-=
g := RTGrapher new.
g view: RTView new.
ds := RTData new.
ds dotShape color: Color blue trans.
ds points: RTShape withAllSubclasses.
ds y: [ :cls | cls numberOfMethods - 50 ].
ds x: [ :cls | cls numberOfLinesOfCode - 150 ].
g add: ds.

RTGrapherSelectRangeViewContext onGrapher: g callback: [ :elements |  (g view attributeAt: #presentation) selection: elements ].

g 
-=-=-=",16,,Define a range for GT,,,,,,,,"
-=-=-=
g := RTGrapher new.
g view: RTView new.
ds := RTData new.
ds dotShape color: Color blue trans.
ds points: RTShape withAllSubclasses.
ds y: [ :cls | cls numberOfMethods - 50 ].
ds x: [ :cls | cls numberOfLinesOfCode - 150 ].
g add: ds.

RTGrapherSelectRangeViewContext onGrapher: g callback: [ :elements |  (g view attributeAt: #presentation) selection: elements ].

g 
-=-=-=",,,,,,,,,,,,
E3,E2 (agree),,RTMenuActivable,"A RTMenuActivable adds a menu to an element. The menu is activable by right-clicking on the node.

For example:

classes := RTObject withAllSubclasses.
v := RTView new.
v @ RTDraggableView.
n := RTMultiLinearColorForIdentity new objects: classes.
shape := RTEllipse new size: #numberOfMethods; color: n.
es := shape elementsOn: classes.
es @ (RTMenuActivable new action: #inspect; item: 'browse class' action: [ :e | e model browse ]).
v addAll: es.
RTFlowLayout on: es.
v",14,,,,,,,,,,,,,,,,,,,,,,
E3,E2 (agree),,RTSunburstBuilderExamples,"RTSunburstBuilderExamples new installTitle: 'basic15' 
                code:
                '
        | b |
        b := RTSunburstBuilder new.
        b strategy: (RTSunburstExtentStrategy new extent: 800@800).
        b shape colorElement: [ :el | el model subclasses isEmpty ifTrue: [ Color purple ] ifFalse: [ Color lightGray ] ].

        b explore: Morph using: #subclasses.
        b view @ RTDraggableView.
        b build.
        ^ b view'
        ",13,,,,,,,,,,"RTSunburstBuilderExamples new installTitle: 'basic15' 
                code:
                '
        | b |
        b := RTSunburstBuilder new.
        b strategy: (RTSunburstExtentStrategy new extent: 800@800).
        b shape colorElement: [ :el | el model subclasses isEmpty ifTrue: [ Color purple ] ifFalse: [ Color lightGray ] ].

        b explore: Morph using: #subclasses.
        b view @ RTDraggableView.
        b build.
        ^ b view'
        ",,,,,,,,,,,,
E3,E2 (agree),,RTTextWord,"A RTTextWord represents one word of an original text.

Instance Variables
        interval:                <Interval>
        text:                <String | Text>

interval
        - interval of the word in the original text

text
        - word, a part of the orignal text",11,A RTTextWord represents one word of an original text.,,,"
interval
        - interval of the word in the original text

text
        - word, a part of the orignal text",,"
Instance Variables
        interval:                <Interval>
        text:                <String | Text>",,,,,,,,,,,,,,,,
E3,E2 (agree),,RTBorderAttachPoint,"I am an attach point that will end the line on the border of the end shapes.

Unline ContinuousAttachPoint & co. you don't need to care about what the end shape is, as long as it is one of the basic shapes.

Supported shapes:
        - Box
        -RoundedBox
        - Ellipse/Circle

Todo:
        - Polygon

Supported lines:
        - Line (straight line)

Todo:
        - MultiLine
        - BezierLine",18,I am an attach point that will end the line on the border of the end shapes.,,,,"Unline ContinuousAttachPoint & co. you don't need to care about what the end shape is, as long as it is one of the basic shapes.",,,,ContinuousAttachPoint,,"
Supported shapes:
        - Box
        -RoundedBox
        - Ellipse/Circle

Todo:
        - Polygon

Supported lines:
        - Line (straight line)

Todo:
        - MultiLine
        - BezierLine",,,,,,,,,,,
E3,,E1 (agree),RTPopupTest,"A ROAbstractPopupTest is xxxxxxxxx.

Instance Variables
        popup:                <Object>
        view:                <Object>

popup
        - xxxxx

view
        - xxxxx",11,A ROAbstractPopupTest is xxxxxxxxx.,,,"popup
        - xxxxx

view
        - xxxxx",,"Instance Variables
        popup:                <Object>
        view:                <Object>",,,,,,,,,,,,,,,,
E3,,E1 (agree),RTExperimentalExample,"RTExperimentalExample new installTitle: 'BoxSelectionForEdges' 
                code:
                '
<gtExample>
| b v |
b := RTObjectBrowser new.
v := RTView new.
v addElement: RTBox element.
b object: v.
^ b'",10,,,,,,,,,,"RTExperimentalExample new installTitle: 'BoxSelectionForEdges' 
                code:
                '
<gtExample>
| b v |
b := RTObjectBrowser new.
v := RTView new.
v addElement: RTBox element.
b object: v.
^ b'",,,,,,,,,,,,
E3,,E1 (agree),RTScrollBarBuilder,"A RTScrollBarBuilder is a scroll bar that you can add to navigate in your view. More than a Draggable view, it allows to keep a mark about your position in the view and it scale for large views. 

It can be static, movable, using #isStatic or #isMovable
aving an orientation #vertical or #horizontal.

the default configuration is #isBasic and #isStatic,

the bar shape is defined by #barShape: <#aBox or default value #anEllipse>
the bar can have a specificity like #scalable, so it give an idea of the size of the view.

Size or fixedPosition can be defined as blocks.

width: to set a static size of width.",13,A RTScrollBarBuilder is a scroll bar that you can add to navigate in your view.,"More than a Draggable view, it allows to keep a mark about your position in the view and it scale for large views.",,"It can be static, movable, using #isStatic or #isMovable
aving an orientation #vertical or #horizontal.

the default configuration is #isBasic and #isStatic,

the bar shape is defined by #barShape: <#aBox or default value #anEllipse>
the bar can have a specificity like #scalable, so it give an idea of the size of the view.

Size or fixedPosition can be defined as blocks.

width: to set a static size of width.",,,,,,,,,,,,,,,,,,
E1,E2 (agree),,RTCPQualitative,"Qualitative schemes do not imply magnitude differences between legend classes, and hues are used to create the primary visual differences between classes. Qualitative schemes are best suited to representing nominal or categorical data.

Check it out by executing:
ColorPalette qualitative show

More info: 
http://colorbrewer2.org/learnmore/schemes_full.html#qualitative

---Copyright:
All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.

FalutUI1 color scheme come from: http://flatuicolors.com/",12,,"Qualitative schemes do not imply magnitude differences between legend classes, and hues are used to create the primary visual differences between classes. Qualitative schemes are best suited to representing nominal or categorical data.
",,,,,"
More info: 
http://colorbrewer2.org/learnmore/schemes_full.html#qualitative.
FalutUI1 color scheme come from: http://flatuicolors.com/",,,"
Check it out by executing:
ColorPalette qualitative show",,FalutUI1 color scheme come from: http://flatuicolors.com/,,,"

http://colorbrewer2.org/learnmore/schemes_full.html#qualitative
FalutUI1 color scheme come from: http://flatuicolors.com/",,Qualitative schemes are best suited to representing nominal or categorical data., Qualitative schemes are best suited to representing nominal or categorical data.,,,"
---Copyright:
All colors, palettes and schemes are from www.ColorBrewer.org by Cynthia A. Brewer, Geography, Pennsylvania State University.",
E1,E2 (agree),,RTBezier3Line,"Describe a cubic Bezier spline

Here is an example:

-=-=-=-=-=
v := RTView new.

s := RTEllipse new color: (Color red alpha: 0.4); size: 30.
e1 := s elementOn: 'Begin'.
e2 := s elementOn: 'End'.
e3 := s elementOn: 'Middle'.


lineShape := RTBezier3Line new.
lineShape controlElement: e3.

lineShape attachPoint: (RTShorterDistanceAttachPoint instance).
edge := lineShape edgeFrom: e1 to: e2.

v add: e1; add: e2; add: e3; add: edge.

e1 @ RTDraggable.
e2 @ RTDraggable.
e3 @ RTDraggable.

e2 translateBy: 80 @ 50.
e3 translateBy: 40 @ 25.

v 
-=-=-=-=-=",30,,Describe a cubic Bezier spline,,,,,,,,"Here is an example:

-=-=-=-=-=
v := RTView new.

s := RTEllipse new color: (Color red alpha: 0.4); size: 30.
e1 := s elementOn: 'Begin'.
e2 := s elementOn: 'End'.
e3 := s elementOn: 'Middle'.


lineShape := RTBezier3Line new.
lineShape controlElement: e3.

lineShape attachPoint: (RTShorterDistanceAttachPoint instance).
edge := lineShape edgeFrom: e1 to: e2.

v add: e1; add: e2; add: e3; add: edge.

e1 @ RTDraggable.
e2 @ RTDraggable.
e3 @ RTDraggable.

e2 translateBy: 80 @ 50.
e3 translateBy: 40 @ 25.

v 
-=-=-=-=-=",,,,,,,,,,,,
E1,E2 (agree),,RTRectangleAttachPoint,"Continuous attach point which presumes both shapes are not rotated rectangles

-=-=-=
v := RTView new.

e1 := (RTBox new size: 50) elementOn: 1.
e2 := (RTEllipse new size: 50) elementOn: 2.
v add: e1; add: e2.
e2 translateBy: 30 @ 60.

e1 @ RTDraggable.
e2 @ RTDraggable.

s := RTArrowedLine new color: Color black.
s attachPoint: RTRectangleAttachPoint new.
l := s edgeFrom: e1 to: e2.
v add: l.

v
-=-=-=",20,,Continuous attach point which presumes both shapes are not rotated rectangles,,,,,,,,"-=-=-=
v := RTView new.

e1 := (RTBox new size: 50) elementOn: 1.
e2 := (RTEllipse new size: 50) elementOn: 2.
v add: e1; add: e2.
e2 translateBy: 30 @ 60.

e1 @ RTDraggable.
e2 @ RTDraggable.

s := RTArrowedLine new color: Color black.
s attachPoint: RTRectangleAttachPoint new.
l := s edgeFrom: e1 to: e2.
v add: l.

v
-=-=-=",,,,,,,,,,,,
E1,,E3 (agree),RTFilterInView,"This interaction adds a set of menu in the view to filter in and out some elements
Here is an example:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.
b view @ RTFilterInView.
b 
-=-=-=

With edges:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b normalizer normalizeColor: #numberOfMethods.
b edges connectFrom: #superclass.
b layout tree.

b view @ RTFilterInView.

b 
-=-=-=

Example using the spawn block:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.

filter := RTFilterInView new.
filter spawnBlock: [ :el | RTView new addAll: el copy; yourself ].
b view @ filter.
b 
-=-=-=",42,,This interaction adds a set of menu in the view to filter in and out some elements,,,,,,,,"Here is an example:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.
b view @ RTFilterInView.
b 
-=-=-=

With edges:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b normalizer normalizeColor: #numberOfMethods.
b edges connectFrom: #superclass.
b layout tree.

b view @ RTFilterInView.

b 
-=-=-=

Example using the spawn block:
-=-=-=
| b |
b := RTMondrian new.
b shape box size: #numberOfMethods.
b nodes: (Collection withAllSubclasses).
b layout grid.
b normalizer normalizeColor: #numberOfMethods.

filter := RTFilterInView new.
filter spawnBlock: [ :el | RTView new addAll: el copy; yourself ].
b view @ filter.
b 
-=-=-=",,,,,,,,,,,,
E2,,E3 (disagree),TROSMShape,"This Shape represent an OpenStreetMap background object which tracks the camera zoom level and translation to build a view of the corresponding part of the OpenStreetMap.

A similar approach could work with Google maps.

Instance Variables
	osmZoomLevel:		<Integer>
	position:		<Point>
	rectangle:	<Rectangle>
	scale:		<Point>
	tiles:		<Dictionary of Point -> Form>
	zoom:		<Point>

osmZoomLevel
	- the zoom level in the OSM range (0 to 18, integer)

position
	- position of the shape

rectangle
	- bounds of the shape

scale
	- the scale of the shape

tiles
	- the cache of tiles, indexed by x, y

zoom
	- zoom of the shape


Principle:
	1.0 in Roassal space -> 1km in OSM. 
	R zoom to OSM zoom level: (base is 1km/pixel) 
		1000 * Rzoom = 156543.034 meters/pixel / (2 ^ zoomlevel)
		zoomlevel = ln( 156.543034 * Rzoom ) / ln 2
		remainderZoom =  156.543034 * Rzoom / (2 ^ zoomlevel))
		lon to Roassal space = [ :l | 40075.016686 * (l / 360) ]
		lat to Roassal space = [ :l | ((Float pi / 4) + (l degreesToRadians / 2)) tan ln * 40075.016686 / (2.0 * Float pi) ]
		Remember : working limit for lat/lon is ±85.05113°

Goal:
	depending on the RTView size and the canvas parameters, get the right tiles from OSM and display them.

Algorithm:
	From the camera, get the zoom level and offset.
	Compute the OSM zoom level (with the camera zoom value).
	Make remainder zoom a transform inside the TROSMShape.
	Take corners of bounding box, get lat / long, get tiles x and y based on previous zoom level.
	Set clipping rectangle to TROSMShape bounds.
	Display each tile.
	cache each tile. When displaying, check if tile exists. Remove tile if not used in display.",52,"""This Shape represent an OpenStreetMap background object which tracks the camera zoom level and translation to build a view of the corresponding part of the OpenStreetMap.

","""This Shape represent an OpenStreetMap background object which tracks the camera zoom level and translation to build a view of the corresponding part of the OpenStreetMap.",,"osmZoomLevel
        - the zoom level in the OSM range (0 to 18, integer)

position
        - position of the shape

rectangle
        - bounds of the shape

scale
        - the scale of the shape

tiles
        - the cache of tiles, indexed by x, y

zoom
        - zoom of the shape","
Principle:
	1.0 in Roassal space -> 1km in OSM. 
	R zoom to OSM zoom level: (base is 1km/pixel) 
		1000 * Rzoom = 156543.034 meters/pixel / (2 ^ zoomlevel)
		zoomlevel = ln( 156.543034 * Rzoom ) / ln 2
		remainderZoom =  156.543034 * Rzoom / (2 ^ zoomlevel))
		lon to Roassal space = [ :l | 40075.016686 * (l / 360) ]
		lat to Roassal space = [ :l | ((Float pi / 4) + (l degreesToRadians / 2)) tan ln * 40075.016686 / (2.0 * Float pi) ]
		Remember : working limit for lat/lon is ±85.05113°

Goal:
	depending on the RTView size and the canvas parameters, get the right tiles from OSM and display them.

Algorithm:
	From the camera, get the zoom level and offset.
	Compute the OSM zoom level (with the camera zoom value).
	Make remainder zoom a transform inside the TROSMShape.
	Take corners of bounding box, get lat / long, get tiles x and y based on previous zoom level.
	Set clipping rectangle to TROSMShape bounds.
	Display each tile.
	cache each tile. When displaying, check if tile exists. Remove tile if not used in display.""","
Instance Variables
        osmZoomLevel:                <Integer>
        position:                <Point>
        rectangle:        <Rectangle>
        scale:                <Point>
        tiles:                <Dictionary of Point -> Form>
        zoom:                <Point>

osmZoomLevel
        - the zoom level in the OSM range (0 to 18, integer)

position
        - position of the shape

rectangle
        - bounds of the shape

scale
        - the scale of the shape

tiles
        - the cache of tiles, indexed by x, y

zoom
        - zoom of the shape


",,,,,,,,,,,,A similar approach could work with Google maps.,,,,
E2,,E3 (disagree),RTLabeled,"A RTLabeled  adds a label above an element. The label may be particularized using #text: in the default string representation is not sufficient. Consider:

E.g., 
v := RTView new.
e := (RTEllipse new size: 30) elementOn: 42.
v add: e.
e @ (RTLabeled new text: [ :value | 'My value is ', value asString ]).
v

Instance Variables
	canvas:		<Object>
	color:		<Object>
	highlightable:		<Object>
	lowColor:		<Object>
	offsetOnEdge:		<Object>
	position:		<Object>
	text:		<Object>

canvas
	- xxxxx

color
	- xxxxx

highlightable
	- xxxxx

lowColor
	- xxxxx

offsetOnEdge
	- xxxxx

position
	- xxxxx

text
	- xxxxx",38,,"""A RTLabeled  adds a label above an element. The label may be particularized using #text: in the default string representation is not sufficient. Consider:",,"canvas
        - xxxxx

color
        - xxxxx

highlightable
        - xxxxx

lowColor
        - xxxxx

offsetOnEdge
        - xxxxx

position
        - xxxxx

text
        - xxxxx""",,"
Instance Variables
        canvas:                <Object>
        color:                <Object>
        highlightable:                <Object>
        lowColor:                <Object>
        offsetOnEdge:                <Object>
        position:                <Object>
        text:                <Object>

canvas
        - xxxxx

color
        - xxxxx

highlightable
        - xxxxx

lowColor
        - xxxxx

offsetOnEdge
        - xxxxx

position
        - xxxxx

text
        - xxxxx""",,,,"
E.g., 
v := RTView new.
e := (RTEllipse new size: 30) elementOn: 42.
v add: e.
e @ (RTLabeled new text: [ :value | 'My value is ', value asString ]).
v",,,,,,,,,,,,
E2,,E1 (disagree),RTForceBasedLayout,"A ROForceBasedLayout is inspired from the Code of D3. The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045

Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.

Instance Variables
        alpha:                <Object>
        center:                <Object>
        charge:                <Object>
        charges:                <Object>
        fixedNodes:                <Object>
        friction:                <Object>
        gravity:                <Object>
        layoutInitial:                <Object>
        length:                <Object>
        lengths:                <Object>
        nodes:                <Object>
        oldPositions:                <Object>
        strength:                <Object>
        strengths:                <Object>
        theta:                <Object>
        weights:                <Object>

alpha
        - xxxxx

center
        - xxxxx

charge
        - xxxxx

charges
        - xxxxx

fixedNodes
        - xxxxx

friction
        - xxxxx

gravity
        - xxxxx

layoutInitial
        - xxxxx

length
        - xxxxx

lengths
        - xxxxx

nodes
        - xxxxx

oldPositions
        - xxxxx

strength
        - xxxxx

strengths
        - xxxxx

theta
        - xxxxx

weights
        - xxxxx",69,"""A ROForceBasedLayout is inspired from the Code of D3. ",,,,,"
Instance Variables
	alpha:		<Object>
	center:		<Object>
	charge:		<Object>
	charges:		<Object>
	fixedNodes:		<Object>
	friction:		<Object>
	gravity:		<Object>
	layoutInitial:		<Object>
	length:		<Object>
	lengths:		<Object>
	nodes:		<Object>
	oldPositions:		<Object>
	strength:		<Object>
	strengths:		<Object>
	theta:		<Object>
	weights:		<Object>

alpha
	- xxxxx

center
	- xxxxx

charge
	- xxxxx

charges
	- xxxxx

fixedNodes
	- xxxxx

friction
	- xxxxx

gravity
	- xxxxx

layoutInitial
	- xxxxx

length
	- xxxxx

lengths
	- xxxxx

nodes
	- xxxxx

oldPositions
	- xxxxx

strength
	- xxxxx

strengths
	- xxxxx

theta
	- xxxxx

weights
	- xxxxx""","The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045

Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.",,,,,,,,The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045,,,,,,Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.,
E2,,E1 (agree),RTCalendarExample,"RTCalendarExample new installTitle: 'VisualizationCSV' 
                code:
'
| b tab colors dictionary |
tab := RTTabTable new input: ''http://bl.ocks.org/mbostock/raw/4063318/dji.csv'' asUrl retrieveContents usingDelimiter: $,.
tab removeFirstRow.

dictionary := Dictionary new.
tab values do: [ :ar | | value |
        value := (ar fifth asNumber - ar second asNumber)/ ar second asNumber.
        dictionary at: ar first asDate put: value ].

colors := #(#(165 0 38) #(215 48 38) #(244 109 67)
        #(253 174 97) #(254 224 139) #(255 255 191) #(217 239 139)
         #(166 217 106) #(102 189 99) #(26 152 80) #(0 104 55)
  ) collect: [ :ar| Color r: ar first g: ar second b: ar third range: 255 ].

b := RTCalendarBuilder new.
b dateShape rectangle size: 15; color: Color white; borderColor: Color lightGray.
b monthShape shape: (b monthShapePath: 15.0).
b yearShape composite: [ :comp | 
        comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).
        comp add: (RTBox new color: Color transparent). ] .
b dates: ((Year year: 1990) to: (Year year: 2010) ).
b dateLayout gapSize: 0.
b monthLayout month.
b yearLayout horizontalLine.
b dateShape if: [ :d | dictionary includesKey: d ] color: 
        [ :d | | value index |
        value := (dictionary at: d)+0.05.
        index := (value * 11/ 0.1)+1.
        index < 1 ifTrue: [ index := 1 ].
        index > 11 ifTrue: [ index := 11 ].
        colors at: index. ].
b dateInteraction popup.
b build.
(b view elements select: [:e | e model isKindOf: Month]) pushFront.
^ b view

'
        ",41,,,,,,,,,,"RTCalendarExample new installTitle: 'VisualizationCSV' 
                code:
'
| b tab colors dictionary |
tab := RTTabTable new input: ''http://bl.ocks.org/mbostock/raw/4063318/dji.csv'' asUrl retrieveContents usingDelimiter: $,.
tab removeFirstRow.

dictionary := Dictionary new.
tab values do: [ :ar | | value |
        value := (ar fifth asNumber - ar second asNumber)/ ar second asNumber.
        dictionary at: ar first asDate put: value ].

colors := #(#(165 0 38) #(215 48 38) #(244 109 67)
        #(253 174 97) #(254 224 139) #(255 255 191) #(217 239 139)
         #(166 217 106) #(102 189 99) #(26 152 80) #(0 104 55)
  ) collect: [ :ar| Color r: ar first g: ar second b: ar third range: 255 ].

b := RTCalendarBuilder new.
b dateShape rectangle size: 15; color: Color white; borderColor: Color lightGray.
b monthShape shape: (b monthShapePath: 15.0).
b yearShape composite: [ :comp | 
        comp add: (RTLabel new text: [ :d | d year ]; height: 20 ).
        comp add: (RTBox new color: Color transparent). ] .
b dates: ((Year year: 1990) to: (Year year: 2010) ).
b dateLayout gapSize: 0.
b monthLayout month.
b yearLayout horizontalLine.
b dateShape if: [ :d | dictionary includesKey: d ] color: 
        [ :d | | value index |
        value := (dictionary at: d)+0.05.
        index := (value * 11/ 0.1)+1.
        index < 1 ifTrue: [ index := 1 ].
        index > 11 ifTrue: [ index := 11 ].
        colors at: index. ].
b dateInteraction popup.
b build.
(b view elements select: [:e | e model isKindOf: Month]) pushFront.
^ b view

'
        ",,,,,,,,,,,,
E3,E2 (agree),,RTAbstractExample,"I am the super class of all the roassal examples.

Try to use this script to know the excecution of roassal examples 

| examples errors |
examples := OrderedCollection new.
errors := OrderedCollection new.
(RTAbstractExample subclasses collect: #new) 
        do: [ :example | 
                example gtExamples do: [:met | | time builder |
                        time := DateAndTime now.
                        [builder := example perform: met selector.
                        (builder isKindOf: RTBuilder) 
                                ifTrue: [ builder build ].
                        time := DateAndTime now - time.
                        time > (1 asDuration)
                                ifTrue: [ examples add: met->time ]
                        ] on: Error do: [ errors add: met ] ] ]
        displayingProgress: 'Running examples'.
examples->errors",20,I am the super class of all the roassal examples.,,,,,,,,,"
Try to use this script to know the excecution of roassal examples 

| examples errors |
examples := OrderedCollection new.
errors := OrderedCollection new.
(RTAbstractExample subclasses collect: #new) 
        do: [ :example | 
                example gtExamples do: [:met | | time builder |
                        time := DateAndTime now.
                        [builder := example perform: met selector.
                        (builder isKindOf: RTBuilder) 
                                ifTrue: [ builder build ].
                        time := DateAndTime now - time.
                        time > (1 asDuration)
                                ifTrue: [ examples add: met->time ]
                        ] on: Error do: [ errors add: met ] ] ]
        displayingProgress: 'Running examples'.
examples->errors",,,,,,,,,,,,
E3,E2 (agree),,RTVerticalMultipleData,"RTVerticalMultipleData represents a group of data points that are vertically located. Each group has the same X value.

Negative data are not allowed.

Here is an example:
[[[
| b d |                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: #( #('hello' 1 2 1) #('world' 2 4 2 ) #('bonjour' 3 5 4) #('bonjour' 3 5 4 ) #('bonjour' 3 5 4)).
d addMetric: #second.
d addMetric: #third.
d addMetric: #fourth.

d barChartWithBarTitle: #first rotation: -30.
b add: d.

b                        
]]] 

Here another example:
[[[
| b d classes |
classes := (Collection withAllSubclasses reverseSortedAs: #numberOfMethods) first:        10.
                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: classes.
d addMetric: #numberOfLinesOfCode.
d addMetric: #numberOfMethods.

d barChartWithBarTitle: #name rotation: -30.
b add: d.

b
]]]                        ",38,RTVerticalMultipleData represents a group of data points that are vertically located.,,RTVerticalMultipleData represents a group of data points that are vertically located.,,"Each group has the same X value.

Negative data are not allowed.",,,,,"
Here is an example:
[[[
| b d |                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: #( #('hello' 1 2 1) #('world' 2 4 2 ) #('bonjour' 3 5 4) #('bonjour' 3 5 4 ) #('bonjour' 3 5 4)).
d addMetric: #second.
d addMetric: #third.
d addMetric: #fourth.

d barChartWithBarTitle: #first rotation: -30.
b add: d.

b                        
]]] 

Here another example:
[[[
| b d classes |
classes := (Collection withAllSubclasses reverseSortedAs: #numberOfMethods) first:        10.
                        
b := RTGrapher new.

d := RTVerticalMultipleData new.
d points: classes.
d addMetric: #numberOfLinesOfCode.
d addMetric: #numberOfMethods.

d barChartWithBarTitle: #name rotation: -30.
b add: d.

b
]]]                        ",,,,,,,,,,,,
E3,,E1 (agree),RTHighlightableWithCursor,"Highlight to indicates that some interaction be can done. It changes the cursor aspect

E.g.,

-=-=-=
| b |
b := RTUMLClassBuilder new
   instanceVariables: #instVarNames;
   methodselector: #selector;
        methodsNames: #rtmethods;
        attributeselector: #yourself.
b attributeShape color: Color black.
b methodShape color: Color black.
b classNameShape color: Color black.
b lineShape color: Color black.
b boxShape borderColor: Color black.

b addObjects: (Collection withAllSubclasses ).
b layout tree.

b build.

b view elements @ RTHighlightableWithCursor.
^b view
-=-=-=

-=-=-=
b := RTMondrian new.
b shape circle size: 10.
b interaction showEdge 
        connectToAll: #subclasses.

b interaction showLabel 
        highlightObjects: #subclasses.
        

nodes := b nodes: (Collection withAllSubclasses).
nodes @ RTHighlightableWithCursor.
b edges moveBehind; connectFrom: #superclass.
b layout radial.
b
-=-=-=",42,,Highlight to indicates that some interaction be can done,It changes the cursor aspect,,,,,,,"
E.g.,

-=-=-=
| b |
b := RTUMLClassBuilder new
   instanceVariables: #instVarNames;
   methodselector: #selector;
        methodsNames: #rtmethods;
        attributeselector: #yourself.
b attributeShape color: Color black.
b methodShape color: Color black.
b classNameShape color: Color black.
b lineShape color: Color black.
b boxShape borderColor: Color black.

b addObjects: (Collection withAllSubclasses ).
b layout tree.

b build.

b view elements @ RTHighlightableWithCursor.
^b view
-=-=-=

-=-=-=
b := RTMondrian new.
b shape circle size: 10.
b interaction showEdge 
        connectToAll: #subclasses.

b interaction showLabel 
        highlightObjects: #subclasses.
        

nodes := b nodes: (Collection withAllSubclasses).
nodes @ RTHighlightableWithCursor.
b edges moveBehind; connectFrom: #superclass.
b layout radial.
b
-=-=-=",,,,,,,,,,,,
E3,,E1 (agree),RTLineDecorationExample,"RTLineDecorationExample new installTitle: 'Cool' 
                code:
                '
        | v b1 b2 edges |
        b1 := (RTBox new
                size: 100;
                element)
                translateTo: 0 @ 0;
                @ RTDraggable.
        b2 := (RTBox new
                size: 100;
                element)
                translateTo: 400 @ 0;
                @ RTDraggable.
        edges := OrderedCollection new.
        edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).


v := RTView new
        add: b1;
        add: b2;
        addAll: edges.
edges do: [ :each | each update ].
v
'
        ",29,,,,,,,,,,"RTLineDecorationExample new installTitle: 'Cool' 
                code:
                '
        | v b1 b2 edges |
        b1 := (RTBox new
                size: 100;
                element)
                translateTo: 0 @ 0;
                @ RTDraggable.
        b2 := (RTBox new
                size: 100;
                element)
                translateTo: 400 @ 0;
                @ RTDraggable.
        edges := OrderedCollection new.
        edges add: ((RTArrowedLine new head: RTFilledDiamond asHead; color: Color black; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new color: Color blue; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; color: Color green; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).
        edges add: ((RTDecoratedLine new filledDiamondHead; emptyCircleTail; color: Color red; width: 2; attachPoint: (RTRectangleAttachPoint new offset: 15)) edgeFrom: b1 to: b2).


v := RTView new
        add: b1;
        add: b2;
        addAll: edges.
edges do: [ :each | each update ].
v
'
        ",,,,,,,,,,,,