Evaluator,Reviewer ,Reviewer 2,Convention,Class,Comment,comment length,Summary,Usage,Parameters,Expand,Version,Development Notes,Todo,Exception,Links,Noise,Warnings,Recommendation,Dependecies,Precondition,Coding Guidelines,Extension,Subclass explnation,Observation
E4,,E3 (disagree),"not specificed , we take PEP",HashCash,Try to collide a hash using the SMTorP algorithm,1,Try to collide a hash using the SMTorP algorithm,,,,,,,,,,,,,,,,,
E3,E2 (agree),,,Group,View groups,1,View groups,,,,,,,,,,,,,,,,,
E2,,E3 (agree),,ListTags,List tags,1,List tags,,,,,,,,,,,,,,,,,
E1,,E4 (agree),,Vcard,Display a single vcard,1,Display a single vcard,,,,,,,,,,,,,,,,,
E4,E1 (disagree),,,Rescan,Add new messages to index,1,Add new messages to index,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,EncryptedUnicodeDict,EncryptedDict which only deals in unicode values.,1,EncryptedDict which only deals in unicode values.,,,,,,,,,,,,,,,,,
E2,,E4 (agree),,ContactSet,"Set contact lines, ensuring contact exists",1,"Set contact lines, ensuring contact exists",,,,,,,,,,,,,,,,,
E1,,E3 (agree),,AutocryptSearch,Search for the Autocrypt database.,1,Search for the Autocrypt database.,,,,,,,,,,,,,,,,,
E4,E2 (agree),,,MailpileMailbox,A Maildir class for Windows (using ! instead of : in filenames),1,A Maildir class for Windows (using ! instead of : in filenames),,,,,,,,,,,,,,,,,
E3,,E4 (agree),,OldPostingList,A posting list is a map of search terms to message IDs.,1,A posting list is a map of search terms to message IDs.,,,,,,,,,,,,,,,,,
E2,E1 (agree),,,Util,Utility functions for builds,1,Utility functions for builds,,,,,,,,,,,,,,,,,
E1,E2 (agree),,,ConnectToGuiOMatic,Connect to a waiting gui-o-matic GUI,1,Connect to a waiting gui-o-matic GUI,,,,,,,,,,,,,,,,,
E4,,E3 (agree),,Forward,Create forwarding drafts of one or more messages,1,Create forwarding drafts of one or more messages,,,,,,,,,,,,,,,,,
E3,E2 (agree),,,VCardSet,"Add a lines to a VCard, ensuring VCard exists",1,"Add a lines to a VCard, ensuring VCard exists",,,,,,,,,,,,,,,,,
E2,,E3 (agree),,MoveFilter,Move an auto-tagging rule,1,Move an auto-tagging rule,,,,,,,,,,,,,,,,,
E1,,E4 (agree),,AutoTlsConnBroker,"This broker tries to auto-upgrade connections to use TLS, or at
least do the SSL handshake here so we can record info about it.",2,"This broker tries to auto-upgrade connections to use TLS, or at
least do the SSL handshake here so we can record info about it.",,,,,,,,,,,,,,,,,
E4,E1 (agree),,,MailpileVFS,"This is a router object that implements the VFS interface but,
delegating calls to individual implementations.",2,"This is a router object that implements the VFS interface but,
delegating calls to individual implementations.",,,,,,,,,,,,,,,,,
E3,E1 (agree),,,Event,"This is a single event in the event log. Actual interpretation and
rendering of events should be handled by the respective source class.",2,This is a single event in the event log.,,," Actual interpretation and
rendering of events should be handled by the respective source class.",,,,,,,," Actual interpretation and
rendering of events should be handled by the respective source class.",,,,,,
E2,,E4 (agree),,MailpileJinjaLoader,"
A Jinja2 template loader which uses the Mailpile configuration
and plugin system to find template files.",2,"""
A Jinja2 template loader which uses the Mailpile configuration
and plugin system to find template files.""",,,,,,,,,,,,,,,,,
E1,,E3 (agree),,EncryptedIntDict,"
EncryptedDict which only deals in signed 64-bit int values.
This also adds a working keys() function.",2,"
EncryptedDict which only deals in signed 64-bit int values.",,,This also adds a working keys() function.,,,,,,,,,,,,,,
E4,E2 (agree),,,ConfigureMailboxes,"
Add one or more mailboxes.

If not account is specified, the mailbox is only assigned an ID for use
in the metadata index.

If an account is specified, the mailbox will be assigned to that account
and configured for automatic indexing.",8,Add one or more mailboxes.,,,,,"If not account is specified, the mailbox is only assigned an ID for use
in the metadata index.

If an account is specified, the mailbox will be assigned to that account
and configured for automatic indexing.",,,,,,,,,,,,
E3,,E4 (agree),,StorageBackedLongs,"
This combines StorageBackedData with Pack/UnpackLongList to pack
and save sets of ints.

>>> storage = {'sbl': '\x01\x00\x00\x00\x00\x00\x00\x00'}
>>> sbl = StorageBackedLongs(storage, 'sbl')
>>> 1 in sbl
True

>>> sbl.append(2)
>>> sbl.save()
>>> UnpackLongList(storage['sbl']) == [1, 2]
True",13,"
This combines StorageBackedData with Pack/UnpackLongList to pack
and save sets of ints.",">>> storage = {'sbl': '\x01\x00\x00\x00\x00\x00\x00\x00'}
>>> sbl = StorageBackedLongs(storage, 'sbl')
>>> 1 in sbl
True

>>> sbl.append(2)
>>> sbl.save()
>>> UnpackLongList(storage['sbl']) == [1, 2]
True",,,,,,,,,,,,,,,,
E2,E1 (disagree),,,VCardStore,"
This is a disk-backed in-memory collection of VCards.

>>> vcs = VCardStore(cfg, '/tmp')

# VCards are added to the collection using add_vcard. This will
# create a file for the card on disk, using a random name.
>>> vcs.add_vcards(MailpileVCard(VCardLine('FN:Dude'),
...                              VCardLine('EMAIL:d@evil.com')),
...                MailpileVCard(VCardLine('FN:Guy')))

VCards can be looked up directly by e-mail.
>>> vcs.get_vcard('d@evil.com').fn
u'Dude'
>>> vcs.get_vcard('nosuch@email.address') is None
True

Or they can be found using searches...
>>> vcs.find_vcards(['guy'])[0].fn
u'Guy'

Cards can be removed using del_vcards
>>> vcs.del_vcards(vcs.get_vcard('d@evil.com'))
>>> vcs.get_vcard('d@evil.com') is None
True
>>> vcs.del_vcards(*vcs.find_vcards(['guy']))
>>> vcs.find_vcards(['guy'])
[]",28,"This is a disk-backed in-memory collection of VCards.
","# VCards are added to the collection using add_vcard. This will
# create a file for the card on disk, using a random name.
>>> vcs.add_vcards(MailpileVCard(VCardLine('FN:Dude'),
...                              VCardLine('EMAIL:d@evil.com')),
...                MailpileVCard(VCardLine('FN:Guy')))

VCards can be looked up directly by e-mail.
>>> vcs.get_vcard('d@evil.com').fn
u'Dude'
>>> vcs.get_vcard('nosuch@email.address') is None
True

Or they can be found using searches...
>>> vcs.find_vcards(['guy'])[0].fn
u'Guy'

Cards can be removed using del_vcards
>>> vcs.del_vcards(vcs.get_vcard('d@evil.com'))
>>> vcs.get_vcard('d@evil.com') is None
True
>>> vcs.del_vcards(*vcs.find_vcards(['guy']))
>>> vcs.find_vcards(['guy'])
[]",,,,,,,,,,,,,,,,
E1,E2 (agree),,,_MockPOP3,"
Base mock that pretends to be a poplib POP3 connection.

>>> pm = POP3Mailbox('localhost', user='bad', conn_cls=_MockPOP3)
Traceback (most recent call last):
   ...
AccessError

>>> pm = POP3Mailbox('localhost', user='a', password='b',
...                  conn_cls=_MockPOP3)
>>> pm.stat()
(2, 123456)

>>> pm.iterkeys()
['evil', 'good']

>>> 'evil' in pm, 'bogon' in pm
(True, False)

>>> [msg['subject'] for msg in pm]
['Msg 1', 'Msg 2']

>>> pm.get_msg_size('evil'), pm.get_msg_size('good')
(47, 51)

>>> pm.get_bytes('evil')
'From: test@mailpile.is\nSubject: Msg 1\n\nOh, hi!\n'

>>> pm.get_bytes('evil', 5)
'From:'

>>> pm['invalid-key']
Traceback (most recent call last):
   ...
KeyError: ...",35,"Base mock that pretends to be a poplib POP3 connection.
",">>> pm = POP3Mailbox('localhost', user='bad', conn_cls=_MockPOP3)
Traceback (most recent call last):
   ...
AccessError

>>> pm = POP3Mailbox('localhost', user='a', password='b',
...                  conn_cls=_MockPOP3)
>>> pm.stat()
(2, 123456)

>>> pm.iterkeys()
['evil', 'good']

>>> 'evil' in pm, 'bogon' in pm
(True, False)

>>> [msg['subject'] for msg in pm]
['Msg 1', 'Msg 2']

>>> pm.get_msg_size('evil'), pm.get_msg_size('good')
(47, 51)

>>> pm.get_bytes('evil')
'From: test@mailpile.is\nSubject: Msg 1\n\nOh, hi!\n'

>>> pm.get_bytes('evil', 5)
'From:'

>>> pm['invalid-key']
Traceback (most recent call last):
   ...
KeyError: ...",,,,,,,,,,,,,,,,
E3,E2 (agree),,,ConfigDict,"
A sanity-checking, self-documenting dictionary of program settings.

The object must be initialized with a dictionary which describes in
a structured way what variables exist, what their legal values are,
and what their defaults are and what they are for.

Each variable definition expects three values:
   1. A human readable description of what the variable is
   2. A data type / sanity check
   3. A default value

If the sanity check is itself a dictionary of rules, values are expected
to be dictionaries or lists of items that match the rules defined. This
should be used with an empty list or dictionary as a default value.

Configuration data can be nested by including a dictionary of further
rules in place of the default value.

If the default value is an empty list, it is assumed to be a list of
values of the type specified.

Examples:

>>> pot = ConfigDict(_rules={'potatoes': ['How many potatoes?', 'int', 0],
...                          'carrots': ['How many carrots?', int, 99],
...                          'liquids': ['Fluids we like', False, {
...                                         'water': ['Liters', int, 0],
...                                         'vodka': ['Liters', int, 12]
...                                      }],
...                          'tags': ['Tags', {'c': ['C', int, 0],
...                                            'x': ['X', str, '']}, []],
...                          'colors': ['Colors', ('red', 'blue'), []]})
>>> sorted(pot.keys()), sorted(pot.values())
(['colors', 'liquids', 'tags'], [[], [], {}])

>>> pot['potatoes'] = pot['liquids']['vodka'] = ""123""
>>> pot['potatoes']
123
>>> pot['liquids']['vodka']
123
>>> pot['carrots']
99

>>> pot.walk('liquids.vodka')
123
>>> pot.walk('liquids/vodka', parent=True)
({...}, 'vodka')

>>> pot['colors'].append('red')
'0'
>>> pot['colors'].extend(['blue', 'red', 'red'])
>>> pot['colors']
['red', 'blue', 'red', 'red']

>>> pot['tags'].append({'c': '123', 'x': 'woots'})
'0'
>>> pot['tags'][0]['c']
123
>>> pot['tags'].append({'z': 'invalid'})
Traceback (most recent call last):
    ...
ValueError: Invalid value for config/tags/1: ...

>>> pot['evil'] = 123
Traceback (most recent call last):
    ...
InvalidKeyError: Invalid key for config: evil
>>> pot['liquids']['evil'] = 123
Traceback (most recent call last):
    ...
InvalidKeyError: Invalid key for config/liquids: evil
>>> pot['potatoes'] = ""moo""
Traceback (most recent call last):
    ...
ValueError: Invalid value for config/potatoes: moo
>>> pot['colors'].append('green')
Traceback (most recent call last):
    ...
ConfigValueError: Invalid value for config/colors/4: green

>>> pot.rules['potatoes']
['How many potatoes?', <type 'int'>, 0]

>>> isinstance(pot['liquids'], ConfigDict)
True",85,"A sanity-checking, self-documenting dictionary of program settings.","Examples:

>>> pot = ConfigDict(_rules={'potatoes': ['How many potatoes?', 'int', 0],
...                          'carrots': ['How many carrots?', int, 99],
...                          'liquids': ['Fluids we like', False, {
...                                         'water': ['Liters', int, 0],
...                                         'vodka': ['Liters', int, 12]
...                                      }],
...                          'tags': ['Tags', {'c': ['C', int, 0],
...                                            'x': ['X', str, '']}, []],
...                          'colors': ['Colors', ('red', 'blue'), []]})
>>> sorted(pot.keys()), sorted(pot.values())
(['colors', 'liquids', 'tags'], [[], [], {}])

>>> pot['potatoes'] = pot['liquids']['vodka'] = ""123""
>>> pot['potatoes']
123
>>> pot['liquids']['vodka']
123
>>> pot['carrots']
99

>>> pot.walk('liquids.vodka')
123
>>> pot.walk('liquids/vodka', parent=True)
({...}, 'vodka')

>>> pot['colors'].append('red')
'0'
>>> pot['colors'].extend(['blue', 'red', 'red'])
>>> pot['colors']
['red', 'blue', 'red', 'red']

>>> pot['tags'].append({'c': '123', 'x': 'woots'})
'0'
>>> pot['tags'][0]['c']
123
>>> pot['tags'].append({'z': 'invalid'})
Traceback (most recent call last):
    ...
ValueError: Invalid value for config/tags/1: ...

>>> pot['evil'] = 123
Traceback (most recent call last):
    ...
InvalidKeyError: Invalid key for config: evil
>>> pot['liquids']['evil'] = 123
Traceback (most recent call last):
    ...
InvalidKeyError: Invalid key for config/liquids: evil
>>> pot['potatoes'] = ""moo""
Traceback (most recent call last):
    ...
ValueError: Invalid value for config/potatoes: moo
>>> pot['colors'].append('green')
Traceback (most recent call last):
    ...
ConfigValueError: Invalid value for config/colors/4: green

>>> pot.rules['potatoes']
['How many potatoes?', <type 'int'>, 0]

>>> isinstance(pot['liquids'], ConfigDict)
True","
Each variable definition expects three values:
   1. A human readable description of what the variable is
   2. A data type / sanity check
   3. A default value","The object must be initialized with a dictionary which describes in
a structured way what variables exist, what their legal values are,
and what their defaults are and what they are for.

Each variable definition expects three values:
   1. A human readable description of what the variable is
   2. A data type / sanity check
   3. A default value

If the sanity check is itself a dictionary of rules, values are expected
to be dictionaries or lists of items that match the rules defined. This
should be used with an empty list or dictionary as a default value.

Configuration data can be nested by including a dictionary of further
rules in place of the default value.

If the default value is an empty list, it is assumed to be a list of
values of the type specified.",,"If the default value is an empty list, it is assumed to be a list of
values of the type specified.",,">>> pot['tags'].append({'z': 'invalid'})
Traceback (most recent call last):
    ...
ValueError: Invalid value for config/tags/1: ...

>>> pot['evil'] = 123
Traceback (most recent call last):
    ...
InvalidKeyError: Invalid key for config: evil
>>> pot['liquids']['evil'] = 123
Traceback (most recent call last):
    ...
InvalidKeyError: Invalid key for config/liquids: evil
>>> pot['potatoes'] = ""moo""
Traceback (most recent call last):
    ...
ValueError: Invalid value for config/potatoes: moo
>>> pot['colors'].append('green')
Traceback (most recent call last):
    ...
ConfigValueError: Invalid value for config/colors/4: green",,,"The object must be initialized with a dictionary which describes in
a structured way what variables exist, what their legal values are,
and what their defaults are and what they are for.
","If the sanity check is itself a dictionary of rules, values are expected
to be dictionaries or lists of items that match the rules defined. This
should be used with an empty list or dictionary as a default value.",,,,,,