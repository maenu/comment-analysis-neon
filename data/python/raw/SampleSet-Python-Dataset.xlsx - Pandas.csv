Evaluator,Reviewer ,Reviewer 2,Convention,Class,Comment,comment length,Summary,Usage,Parameters,Expand,Version,Development Notes,Todo,Exception,Links,Noise,Warning,Recommendation,Dependecies,Precondition,Coding Guidelines,Extension,Subclass Explanation,Observation
E1,E2 (agree),,https://pandas.pydata.org/pandas-docs/stable/development/contributing_docstring.html#docstring,AbstractEngine,Object serving as a base class for all engines.,1,Object serving as a base class for all engines.,,,,,,,,,,,,,,,,,
E1,,E3 (agree),Pandas and  Numpy doccstrings,AbstractHolidayCalendar,Abstract interface to create holidays following certain rules.,1,Abstract interface to create holidays following certain rules.,,,,,,,,,,,,,,,,,
E1,E3 (agree with E4),E4 (disagree),,BusinessHour,DateOffset subclass representing possibly n business hours.,1,DateOffset subclass representing possibly n business hours.,,,,,,,,,,,,,,,,DateOffset subclass representing possibly n business hours.,
E2,E1 (agree),,,BusinessMixin,Mixin to business types to provide related functions.,1,Mixin to business types to provide related functions.,,,,,,,,,,,,,,,,,
E2,,E3 (agree),,BYearBegin,DateOffset increments between business year begin dates.,1,DateOffset increments between business year begin dates.,,,,,,,,,,,,,,,,,
E2,,E4 (disagree),,CheckingBuildExt,Subclass build_ext to get clearer report if Cython is necessary.,1,,,,,,,,,,,,,,,,,Subclass build_ext to get clearer report if Cython is necessary.,
E3,E1 (agree),,,DataIndexableCol,represent a data column that can be indexed ,1,represent a data column that can be indexed ,,,,,,,,,,,,,,,,,
E3,E2 (agree),,,NonConsolidatableMixIn,hold methods for the nonconsolidatable blocks ,1,hold methods for the nonconsolidatable blocks ,,,,,,,,,,,,,,,,,
E3,,E4 (agree),,TermValue,hold a term value the we use to construct a condition/filter ,1,hold a term value the we use to construct a condition/filter ,,,,,,,,,,,,,,,,,
E4,E1 (agree),,,TestDatetimelikeSubtype,Tests specific to IntervalIndex with datetime-like subtype,1,Tests specific to IntervalIndex with datetime-like subtype,,,,,,,,,,,,,,,,,
E4,E2 (agree),,,AccessorDocumenter,Specialized Documenter subclass for accessors.,1,Specialized Documenter subclass for accessors.,,,,,,,,,,,,,,,,,
E4,,E3 (agree),,TestFromArrays,Tests specific to IntervalIndex.from_arrays,1,Tests specific to IntervalIndex.from_arrays,,,,,,,,,,,,,,,,,
E1,E2 (agree),,,TestFromTuples,Tests specific to IntervalIndex.from_tuples,1,Tests specific to IntervalIndex.from_tuples,,,,,,,,,,,,,,,,,
E1,,E3 (agree),,TestSorted,everything you wanted to test about sorting ,1,everything you wanted to test about sorting ,,,,,,,,,,,,,,,,,
E2,E1 (agree),,,Holiday,"Class that defines a holiday with start/end dates and rules
for observance.",2,"Class that defines a holiday with start/end dates and rules
for observance.",,,,,,,,,,,,,,,,,
E2,,E3 (agree),,AccessorCallableDocumenter,"This documenter lets us removes .__call__ from the method signature for
callable accessors like Series.plot",2,"This documenter lets us removes .__call__ from the method signature for
callable accessors like Series.plot",,,,,,,,,,,,,,,,,
E3,E1 (agree),,,TestPeriodIndexSeriesComparisonConsistency,"Test PeriodIndex and Period Series Ops consistency 
TODO: needs parametrization+de-duplication",2,Test PeriodIndex and Period Series Ops consistency ,,,,,,TODO: needs parametrization+de-duplication,,,,,,,,,,,
E3,E2 (agree),,,SQLiteTable,"Patch the SQLTable for fallback support.
Instead of a table variable just use the Create Table statement.",2,Patch the SQLTable for fallback support.,,,,,Instead of a table variable just use the Create Table statement.,,,,,Instead of a table variable just use the Create Table statement.,,,,,,,
E4,E1 (disagree),E3 (agree with E1),,SetopCheck,"This is called to decorate the set operations of IntervalIndex
to perform the type check in advance.",2,"This is called to decorate the set operations of IntervalIndex
to perform the type check in advance.",,,,,"This is called to decorate the set operations of IntervalIndex
to perform the type check in advance.",,,,,,,,,,,,
E4,E2 (agree),,,_MergeOperation,"Perform a database (SQL) merge operation between two DataFrame or Series
objects using either columns as keys or their row indexes",2,,Perform a database (SQL) merge operation between two DataFrame or Series objects using either columns as keys or their row indexes,,,,,,,,,,,,,,,,
E1,,E4 (agree),,UnsortedIndexError,"Error raised when attempting to get a slice of a MultiIndex,
and the index has not been lexsorted. Subclass of `KeyError`.",2,"Error raised when attempting to get a slice of a MultiIndex,
and the index has not been lexsorted.",,,Subclass of `KeyError`.,,,,,,,,,,,,,,
E1,E2 (agree),,,CythonCommand,"
Custom distutils command subclassed from Cython.Distutils.build_ext
to compile pyx->c, and stop there. All this does is override the
C-compile method build_extension() with a no-op.",4,"Custom distutils command subclassed from Cython.Distutils.build_ext
to compile pyx->c, and stop there.",,,,,,,,,,,,,,,,"All this does is override the
C-compile method build_extension() with a no-op.",
E2,,E4 (disagree),,Base,"
Common tests for all variations of IntervalIndex construction. Input data
to be supplied in breaks format, then converted by the subclass method
get_kwargs_from_breaks to the expected format.",4,"
Common tests for all variations of IntervalIndex construction. ",,,"Input data to be supplied in breaks format, then converted by the subclass method get_kwargs_from_breaks to the expected format.",,"Input data
to be supplied in breaks format, then converted by the subclass method
get_kwargs_from_breaks to the expected format.",,,,,,,,"Input data
to be supplied in breaks format, then converted by the subclass method
get_kwargs_from_breaks to the expected format.",,,,
E2,E1 (agree),,,BaseInterfaceTests,"
Tests that the basic interface is satisfied.
------------------------------------------------------------------------
    Interface
    ------------------------------------------------------------------------",5,"
Tests that the basic interface is satisfied.
------------------------------------------------------------------------
    Interface
    ------------------------------------------------------------------------",,,,,,,,,,,,,,,,,
E3,,E4 (agree),,SQLTable,"
For mapping Pandas tables to SQL tables.
Uses fact that table is reflected by SQLAlchemy to
do better type conversions.
Also holds various flags needed to avoid having to
pass them between functions all the time.
TODO: support for multiIndex",7,For mapping Pandas tables to SQL tables.,,,"Uses fact that table is reflected by SQLAlchemy to
do better type conversions.
Also holds various flags needed to avoid having to
pass them between functions all the time.",,,TODO: support for multiIndex,,,,,,,,,,,
E3,E1 (agree),,,StringMethods,"
Vectorized string functions for Series and Index. NAs stay NA unless
handled otherwise by a particular method. Patterned after Python's string
methods, with some inspiration from R's stringr package.

Examples
--------
>>> s.str.split('_')
>>> s.str.replace('_', '')",9,Vectorized string functions for Series and Index.,"Examples
--------
>>> s.str.split('_')
>>> s.str.replace('_', '')",,,," NAs stay NA unless
handled otherwise by a particular method. Patterned after Python's string
methods, with some inspiration from R's stringr package.",,,,,,"""NAs stay NA unless
handled otherwise by a particular method. Patterned after Python's string
methods, with some inspiration from R's stringr package.
""",,,"Patterned after Python's string
methods, with some inspiration from R's stringr package.
""",,,
E4,,E3 (disagree),,SelectNSeries,"Implement n largest/smallest for Series

Parameters
----------
obj : Series
n : int
keep : {'first', 'last'}, default 'first'

Returns
-------
nordered : Series",12,Implement n largest/smallest for Series,,"Parameters
----------
obj : Series
n : int
keep : {'first', 'last'}, default 'first'

Returns
-------
nordered : Series",,,,,,,,,,,,,,,
E4,E1 (agree),,,ExcelFile,"
Class for parsing tabular excel sheets into DataFrame objects.
Uses xlrd. See read_excel for more documentation

Parameters
----------
io : str, path object (pathlib.Path or py._path.local.LocalPath),
    a file-like object, xlrd workbook or openpypl workbook.
    If a string or path object, expected to be a path to xls, xlsx or odf file.
engine : str, default None
    If io is not a buffer or path, this must be set to identify io.
    Acceptable values are None, ``xlrd``, ``openpyxl`` or ``odf``.
    Note that ``odf`` reads tables out of OpenDocument formatted files.",13,Class for parsing tabular excel sheets into DataFrame objects.,,"Parameters
----------
io : str, path object (pathlib.Path or py._path.local.LocalPath),
    a file-like object, xlrd workbook or openpypl workbook.
    If a string or path object, expected to be a path to xls, xlsx or odf file.
engine : str, default None
    If io is not a buffer or path, this must be set to identify io.
    Acceptable values are None, ``xlrd``, ``openpyxl`` or ``odf``.
    Note that ``odf`` reads tables out of OpenDocument formatted files.",,,Uses xlrd. See read_excel for more documentation,,,See read_excel for more documentation,,,,,,Uses xlrd. ,,,
E1,,E3 (agree),,IntervalDtype,"
An ExtensionDtype for Interval data.

**This is not an actual numpy dtype**, but a duck type.

Parameters
----------
subtype : str, np.dtype
    The dtype of the Interval bounds.

Attributes
----------
subtype

Methods
-------
None

Examples
--------
>>> pd.IntervalDtype(subtype='int64')
interval[int64]",22,An ExtensionDtype for Interval data.,"
Examples
--------
>>> pd.IntervalDtype(subtype='int64')
interval[int64]","Parameters
----------
subtype : str, np.dtype
    The dtype of the Interval bounds.","Attributes
----------
subtype
Methods
-------
None
",,"**This is not an actual numpy dtype**, but a duck type.",,,,,"**This is not an actual numpy dtype**, but a duck type.",,,,,,,
E1,,E4 (agree),,CategoricalDtype,"
Type for categorical data with the categories and orderedness.

.. versionchanged:: 0.21.0

Parameters
----------
categories : sequence, optional
    Must be unique, and must not contain any nulls.
ordered : bool or None, default False
    Whether or not this categorical is treated as a ordered categorical.
    None can be used to maintain the ordered value of existing categoricals when
    used in operations that combine categoricals, e.g. astype, and will resolve to
    False if there is no existing ordered to maintain.

Attributes
----------
categories
ordered

Methods
-------
None

See Also
--------
Categorical

Notes
-----
This class is useful for specifying the type of a ``Categorical``
independent of the values. See :ref:`categorical.categoricaldtype`
for more.

Examples
--------
>>> t = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)
>>> pd.Series(['a', 'b', 'a', 'c'], dtype=t)
0      a
1      b
2      a
3    NaN
dtype: category
Categories (2, object): [b < a]",44,Type for categorical data with the categories and orderedness.,"Examples
--------
>>> t = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)
>>> pd.Series(['a', 'b', 'a', 'c'], dtype=t)
0      a
1      b
2      a
3    NaN
dtype: category
Categories (2, object): [b < a]","Parameters
----------
categories : sequence, optional
    Must be unique, and must not contain any nulls.
ordered : bool or None, default False
    Whether or not this categorical is treated as a ordered categorical.
    None can be used to maintain the ordered value of existing categoricals when
    used in operations that combine categoricals, e.g. astype, and will resolve to
    False if there is no existing ordered to maintain.","Attributes
----------
categories
ordered
Methods
-------
None
",. versionchanged:: 0.21.0,"Notes
-----
This class is useful for specifying the type of a ``Categorical``
independent of the values. See :ref:`categorical.categoricaldtype`
for more.",,,"See :ref:`categorical.categoricaldtype`
for more.
See Also
--------
Categorical
",,,,,,,,,
E2,,E3 (disagree),,BooleanArray,"
Array of boolean (True/False) data with missing values.

This is a pandas Extension array for boolean data, under the hood
represented by 2 numpy arrays: a boolean array with the data and
a boolean array with the mask (True indicating missing).

BooleanArray implements Kleene logic (sometimes called three-value
logic) for logical operations. See :ref:`boolean.kleene` for more.

To construct an BooleanArray from generic array-like input, use
:func:`pandas.array` specifying ``dtype=""boolean""`` (see examples
below).

.. versionadded:: 1.0.0

.. warning::

   BooleanArray is considered experimental. The implementation and
   parts of the API may change without warning.

Parameters
----------
values : numpy.ndarray
    A 1-d boolean-dtype array with the data.
mask : numpy.ndarray
    A 1-d boolean-dtype array indicating missing values (True
    indicates missing).
copy : bool, default False
    Whether to copy the `values` and `mask` arrays.

Attributes
----------
None

Methods
-------
None

Returns
-------
BooleanArray

Examples
--------
Create an BooleanArray with :func:`pandas.array`:

>>> pd.array([True, False, None], dtype=""boolean"")
<BooleanArray>
[True, False, NA]
Length: 3, dtype: boolean",51,"Array of boolean (True/False) data with missing values.
","Examples
--------
Create an BooleanArray with :func:`pandas.array`:

>>> pd.array([True, False, None], dtype=""boolean"")
<BooleanArray>
[True, False, NA]
Length: 3, dtype: boolean","
Parameters
----------
values : numpy.ndarray
    A 1-d boolean-dtype array with the data.
mask : numpy.ndarray
    A 1-d boolean-dtype array indicating missing values (True
    indicates missing).
copy : bool, default False
    Whether to copy the `values` and `mask` arrays.","
This is a pandas Extension array for boolean data, under the hood
represented by 2 numpy arrays: a boolean array with the data and
a boolean array with the mask (True indicating missing).

BooleanArray implements Kleene logic (sometimes called three-value
logic) for logical operations. See :ref:`boolean.kleene` for more.

To construct an BooleanArray from generic array-like input, use
:func:`pandas.array` specifying ``dtype=""boolean""`` (see examples
below).

Attributes
----------
None

Methods
-------
None

Returns
-------
BooleanArray","
.. version added:: 1.0.0",,,, See :ref:`boolean.kleene` for more.,,".. warning::

   BooleanArray is considered experimental. The implementation and
   parts of the API may change without warning.",,,,,,,
E2,,E4 (disagree),,IntegerArray,"
Array of integer (optional missing) values.

.. versionadded:: 0.24.0

.. warning::

   IntegerArray is currently experimental, and its API or internal
   implementation may change without warning.

We represent an IntegerArray with 2 numpy arrays:

- data: contains a numpy integer array of the appropriate dtype
- mask: a boolean array holding a mask on the data, True is missing

To construct an IntegerArray from generic array-like input, use
:func:`pandas.array` with one of the integer dtypes (see examples).

See :ref:`integer_na` for more.

Parameters
----------
values : numpy.ndarray
    A 1-d integer-dtype array.
mask : numpy.ndarray
    A 1-d boolean-dtype array indicating missing values.
copy : bool, default False
    Whether to copy the `values` and `mask`.

Attributes
----------
None

Methods
-------
None

Returns
-------
IntegerArray

Examples
--------
Create an IntegerArray with :func:`pandas.array`.

>>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())
>>> int_array
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: Int32

String aliases for the dtypes are also available. They are capitalized.

>>> pd.array([1, None, 3], dtype='Int32')
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: Int32

>>> pd.array([1, None, 3], dtype='UInt16')
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: UInt16",62,"Array of integer (optional missing) values.
","To construct an IntegerArray from generic array-like input, use
:func:`pandas.array` with one of the integer dtypes (see examples).
Examples
--------
Create an IntegerArray with :func:`pandas.array`.

>>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())
>>> int_array
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: Int32

String aliases for the dtypes are also available. They are capitalized.

>>> pd.array([1, None, 3], dtype='Int32')
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: Int32

>>> pd.array([1, None, 3], dtype='UInt16')
<IntegerArray>
[1, NaN, 3]
Length: 3, dtype: UInt16","
Parameters
----------
values : numpy.ndarray
    A 1-d integer-dtype array.
mask : numpy.ndarray
    A 1-d boolean-dtype array indicating missing values.
copy : bool, default False
    Whether to copy the `values` and `mask`.","
Attributes
----------
None

Methods
-------
None

Returns
-------
IntegerArray
We represent an IntegerArray with 2 numpy arrays:

- data: contains a numpy integer array of the appropriate dtype
- mask: a boolean array holding a mask on the data, True is missing

To construct an IntegerArray from generic array-like input, use
:func:`pandas.array` with one of the integer dtypes (see examples).",.. versionadded:: 0.24.0,"We represent an IntegerArray with 2 numpy arrays:

- data: contains a numpy integer array of the appropriate dtype
- mask: a boolean array holding a mask on the data, True is missing

To construct an IntegerArray from generic array-like input, use
:func:`pandas.array` with one of the integer dtypes (see examples).",,,See :ref:`integer_na` for more.,,".. warning::

   IntegerArray is currently experimental, and its API or internal
   implementation may change without warning.

We represent an IntegerArray with 2 numpy arrays:

- data: contains a numpy integer array of the appropriate dtype
- mask: a boolean array holding a mask on the data, True is missing

To construct an IntegerArray from generic array-like input, use
:func:`pandas.array` with one of the integer dtypes (see examples).",,,,,,,
E3,E2 (agree),,,StringArray,"
Extension array for string data.

.. versionadded:: 1.0.0

.. warning::

   StringArray is considered experimental. The implementation and
   parts of the API may change without warning.

   In particular, the NA value used may change to no longer be
   ``numpy.nan``.

Parameters
----------
values : array-like
    The array of data.

    .. warning::

       Currently, this expects an object-dtype ndarray
       where the elements are Python strings. This may
       change without warning in the future.
copy : bool, default False
    Whether to copy the array of data.

Attributes
----------
None

Methods
-------
None

See Also
--------
Series.str
    The string methods are available on Series backed by
    a StringArray.

Notes
-----
StringArray returns a BooleanArray for comparison methods.

Examples
--------
>>> pd.array(['This is', 'some text', None, 'data.'], dtype=""string"")
<StringArray>
['This is', 'some text', NA, 'data.']
Length: 4, dtype: string

Unlike ``object`` dtype arrays, ``StringArray`` doesn't allow non-string
values.

>>> pd.array(['1', 1], dtype=""string"")
Traceback (most recent call last):
...
ValueError: StringArray requires an object-dtype ndarray of strings.

For comparison methods, this returns a :class:`pandas.BooleanArray`

>>> pd.array([""a"", None, ""c""], dtype=""string"") == ""a""
<BooleanArray>
[True, NA, False]
Length: 3, dtype: boolean",65,"
Extension array for string data.","
Examples
--------
>>> pd.array(['This is', 'some text', None, 'data.'], dtype=""string"")
<StringArray>
['This is', 'some text', NA, 'data.']
Length: 4, dtype: string

Unlike ``object`` dtype arrays, ``StringArray`` doesn't allow non-string
values.

>>> pd.array(['1', 1], dtype=""string"")
Traceback (most recent call last):
...
ValueError: StringArray requires an object-dtype ndarray of strings.

For comparison methods, this returns a :class:`pandas.BooleanArray`

>>> pd.array([""a"", None, ""c""], dtype=""string"") == ""a""
<BooleanArray>
[True, NA, False]","Parameters
----------
values : array-like
    The array of data.

    .. warning::

       Currently, this expects an object-dtype ndarray
       where the elements are Python strings. This may
       change without warning in the future.
copy : bool, default False
    Whether to copy the array of data.","Attributes
----------
None
For comparison methods, this returns a :class:`pandas.BooleanArray`
Methods
-------
None",.. versionadded:: 1.0.0,"

Notes
-----
StringArray returns a BooleanArray for comparison methods.",,ValueError: StringArray requires an object-dtype ndarray of strings.,"See Also
--------
Series.str
    The string methods are available on Series backed by
    a StringArray.",,"
.. warning::

   StringArray is considered experimental. The implementation and
   parts of the API may change without warning.

   In particular, the NA value used may change to no longer be
   ``numpy.nan``.",,,,,,,
E3,,E4 (agree),,CategoricalIndex,"
Index based on an underlying :class:`Categorical`.

CategoricalIndex, like Categorical, can only take on a limited,
and usually fixed, number of possible values (`categories`). Also,
like Categorical, it might have an order, but numerical operations
(additions, divisions, ...) are not possible.

Parameters
----------
data : array-like (1-dimensional)
    The values of the categorical. If `categories` are given, values not in
    `categories` will be replaced with NaN.
categories : index-like, optional
    The categories for the categorical. Items need to be unique.
    If the categories are not given here (and also not in `dtype`), they
    will be inferred from the `data`.
ordered : bool, optional
    Whether or not this categorical is treated as an ordered
    categorical. If not given here or in `dtype`, the resulting
    categorical will be unordered.
dtype : CategoricalDtype or ""category"", optional
    If :class:`CategoricalDtype`, cannot be used together with
    `categories` or `ordered`.

    .. versionadded:: 0.21.0
copy : bool, default False
    Make a copy of input ndarray.
name : object, optional
    Name to be stored in the index.

Attributes
----------
codes
categories
ordered

Methods
-------
rename_categories
reorder_categories
add_categories
remove_categories
remove_unused_categories
set_categories
as_ordered
as_unordered
map

Raises
------
ValueError
    If the categories do not validate.
TypeError
    If an explicit ``ordered=True`` is given but no `categories` and the
    `values` are not sortable.

See Also
--------
Index : The base pandas Index type.
Categorical : A categorical array.
CategoricalDtype : Type for categorical data.

Notes
-----
See the `user guide
<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`_
for more.

Examples
--------
>>> pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa

``CategoricalIndex`` can also be instantiated from a ``Categorical``:

>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])
>>> pd.CategoricalIndex(c)
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa

Ordered ``CategoricalIndex`` can have a min and max value.

>>> ci = pd.CategoricalIndex(['a','b','c','a','b','c'], ordered=True,
...                          categories=['c', 'b', 'a'])
>>> ci
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')  # noqa
>>> ci.min()
'c'",88,Index based on an underlying :class:`Categorical`.,"
Examples
--------
>>> pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa

``CategoricalIndex`` can also be instantiated from a ``Categorical``:

>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])
>>> pd.CategoricalIndex(c)
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['a', 'b', 'c'], ordered=False, dtype='category')  # noqa

Ordered ``CategoricalIndex`` can have a min and max value.

>>> ci = pd.CategoricalIndex(['a','b','c','a','b','c'], ordered=True,
...                          categories=['c', 'b', 'a'])
>>> ci
CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'], categories=['c', 'b', 'a'], ordered=True, dtype='category')  # noqa
>>> ci.min()
'c'","Parameters
----------
data : array-like (1-dimensional)
    The values of the categorical. If `categories` are given, values not in
    `categories` will be replaced with NaN.
categories : index-like, optional
    The categories for the categorical. Items need to be unique.
    If the categories are not given here (and also not in `dtype`), they
    will be inferred from the `data`.
ordered : bool, optional
    Whether or not this categorical is treated as an ordered
    categorical. If not given here or in `dtype`, the resulting
    categorical will be unordered.
dtype : CategoricalDtype or ""category"", optional
    If :class:`CategoricalDtype`, cannot be used together with
    `categories` or `ordered`.

    .. versionadded:: 0.21.0
copy : bool, default False
    Make a copy of input ndarray.
name : object, optional
    Name to be stored in the index.
","CategoricalIndex, like Categorical, can only take on a limited,
and usually fixed, number of possible values (`categories`). Also,
like Categorical, it might have an order, but numerical operations
(additions, divisions, ...) are not possible.

Methods
-------
rename_categories
reorder_categories
add_categories
remove_categories
remove_unused_categories
set_categories
as_ordered
as_unordered
map
Attributes
----------
codes
categories
ordered",,"Notes
-----
See the `user guide
<http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`_
for more.",,"
Raises
------
ValueError
    If the categories do not validate.
TypeError
    If an explicit ``ordered=True`` is given but no `categories` and the
    `values` are not sortable.","See Also
--------
Index : The base pandas Index type.
Categorical : A categorical array.
CategoricalDtype : Type for categorical data.",,,,,,,,"
Index based on an underlying :class:`Categorical`.",
E4,E2 (agree),,,PlotAccessor,"
Make plots of Series or DataFrame.

Uses the backend specified by the
option ``plotting.backend``. By default, matplotlib is used.

Parameters
----------
data : Series or DataFrame
    The object for which the method is called.
x : label or position, default None
    Only used if data is a DataFrame.
y : label, position or list of label, positions, default None
    Allows plotting of one column versus another. Only used if data is a
    DataFrame.
kind : str
    The kind of plot to produce:

    - 'line' : line plot (default)
    - 'bar' : vertical bar plot
    - 'barh' : horizontal bar plot
    - 'hist' : histogram
    - 'box' : boxplot
    - 'kde' : Kernel Density Estimation plot
    - 'density' : same as 'kde'
    - 'area' : area plot
    - 'pie' : pie plot
    - 'scatter' : scatter plot
    - 'hexbin' : hexbin plot.

figsize : a tuple (width, height) in inches
use_index : bool, default True
    Use index as ticks for x axis.
title : str or list
    Title to use for the plot. If a string is passed, print the string
    at the top of the figure. If a list is passed and `subplots` is
    True, print each item in the list above the corresponding subplot.
grid : bool, default None (matlab style default)
    Axis grid lines.
legend : bool or {'reverse'}
    Place legend on axis subplots.
style : list or dict
    The matplotlib line style per column.
logx : bool or 'sym', default False
    Use log scaling or symlog scaling on x axis.
    .. versionchanged:: 0.25.0

logy : bool or 'sym' default False
    Use log scaling or symlog scaling on y axis.
    .. versionchanged:: 0.25.0

loglog : bool or 'sym', default False
    Use log scaling or symlog scaling on both x and y axes.
    .. versionchanged:: 0.25.0

xticks : sequence
    Values to use for the xticks.
yticks : sequence
    Values to use for the yticks.
xlim : 2-tuple/list
ylim : 2-tuple/list
rot : int, default None
    Rotation for ticks (xticks for vertical, yticks for horizontal
    plots).
fontsize : int, default None
    Font size for xticks and yticks.
colormap : str or matplotlib colormap object, default None
    Colormap to select colors from. If string, load colormap with that
    name from matplotlib.
colorbar : bool, optional
    If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
    plots).
position : float
    Specify relative alignments for bar plot layout.
    From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
    (center).
table : bool, Series or DataFrame, default False
    If True, draw a table using the data in the DataFrame and the data
    will be transposed to meet matplotlib's default layout.
    If a Series or DataFrame is passed, use passed data to draw a
    table.
yerr : DataFrame, Series, array-like, dict and str
    See :ref:`Plotting with Error Bars <visualization.errorbars>` for
    detail.
xerr : DataFrame, Series, array-like, dict and str
    Equivalent to yerr.
mark_right : bool, default True
    When using a secondary_y axis, automatically mark the column
    labels with ""(right)"" in the legend.
include_bool : bool, default is False
    If True, boolean values can be plotted.
backend : str, default None
    Backend to use instead of the backend specified in the option
    ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
    specify the ``plotting.backend`` for the whole session, set
    ``pd.options.plotting.backend``.

    .. versionadded:: 1.0.0

**kwargs
    Options to pass to matplotlib plotting method.

Returns
-------
:class:`matplotlib.axes.Axes` or numpy.ndarray of them
    If the backend is not the default matplotlib one, the return value
    will be the object returned by the backend.

Notes
-----
- See matplotlib documentation online for more on this subject
- If `kind` = 'bar' or 'barh', you can specify relative alignments
  for bar plot layout by `position` keyword.
  From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
  (center)",115,Make plots of Series or DataFrame.,"Uses the backend specified by the
option ``plotting.backend``. By default, matplotlib is used.","Parameters
----------
data : Series or DataFrame
    The object for which the method is called.
x : label or position, default None
    Only used if data is a DataFrame.
y : label, position or list of label, positions, default None
    Allows plotting of one column versus another. Only used if data is a
    DataFrame.
kind : str
    The kind of plot to produce:

    - 'line' : line plot (default)
    - 'bar' : vertical bar plot
    - 'barh' : horizontal bar plot
    - 'hist' : histogram
    - 'box' : boxplot
    - 'kde' : Kernel Density Estimation plot
    - 'density' : same as 'kde'
    - 'area' : area plot
    - 'pie' : pie plot
    - 'scatter' : scatter plot
    - 'hexbin' : hexbin plot.

figsize : a tuple (width, height) in inches
use_index : bool, default True
    Use index as ticks for x axis.
title : str or list
    Title to use for the plot. If a string is passed, print the string
    at the top of the figure. If a list is passed and `subplots` is
    True, print each item in the list above the corresponding subplot.
grid : bool, default None (matlab style default)
    Axis grid lines.
legend : bool or {'reverse'}
    Place legend on axis subplots.
style : list or dict
    The matplotlib line style per column.
logx : bool or 'sym', default False
    Use log scaling or symlog scaling on x axis.
    .. versionchanged:: 0.25.0

logy : bool or 'sym' default False
    Use log scaling or symlog scaling on y axis.
    .. versionchanged:: 0.25.0

loglog : bool or 'sym', default False
    Use log scaling or symlog scaling on both x and y axes.
    .. versionchanged:: 0.25.0

xticks : sequence
    Values to use for the xticks.
yticks : sequence
    Values to use for the yticks.
xlim : 2-tuple/list
ylim : 2-tuple/list
rot : int, default None
    Rotation for ticks (xticks for vertical, yticks for horizontal
    plots).
fontsize : int, default None
    Font size for xticks and yticks.
colormap : str or matplotlib colormap object, default None
    Colormap to select colors from. If string, load colormap with that
    name from matplotlib.
colorbar : bool, optional
    If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
    plots).
position : float
    Specify relative alignments for bar plot layout.
    From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
    (center).
table : bool, Series or DataFrame, default False
    If True, draw a table using the data in the DataFrame and the data
    will be transposed to meet matplotlib's default layout.
    If a Series or DataFrame is passed, use passed data to draw a
    table.
yerr : DataFrame, Series, array-like, dict and str
    See :ref:`Plotting with Error Bars <visualization.errorbars>` for
    detail.
xerr : DataFrame, Series, array-like, dict and str
    Equivalent to yerr.
mark_right : bool, default True
    When using a secondary_y axis, automatically mark the column
    labels with ""(right)"" in the legend.
include_bool : bool, default is False
    If True, boolean values can be plotted.
backend : str, default None
    Backend to use instead of the backend specified in the option
    ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
    specify the ``plotting.backend`` for the whole session, set
    ``pd.options.plotting.backend``.

    .. versionadded:: 1.0.0

**kwargs
    Options to pass to matplotlib plotting method.

Returns
-------
:class:`matplotlib.axes.Axes` or numpy.ndarray of them
    If the backend is not the default matplotlib one, the return value
    will be the object returned by the backend.","
- If `kind` = 'bar' or 'barh', you can specify relative alignments
  for bar plot layout by `position` keyword.
  From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
  (center)",,"Uses the backend specified by the
option ``plotting.backend``. By default, matplotlib is used.

Notes
-----
- See matplotlib documentation online for more on this subject
- If `kind` = 'bar' or 'barh', you can specify relative alignments
  for bar plot layout by `position` keyword.
  From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
  (center)",,,"
- See matplotlib documentation online for more on this subject
",,,,"Uses the backend specified by the
option ``plotting.backend``. By default, matplotlib is used.",,,,,