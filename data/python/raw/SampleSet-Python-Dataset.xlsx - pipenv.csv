Evaluator,Reviewer ,Reviewer 2,Convention,Class,Comment,comment length,Summary,Usage,Parameters,Expand,Version,Development Notes,Todo,Exception,Links,Noise,warnings,Recommendation,Dependecies,Precondition,Coding Guidelines,Extension,Subclass explanation,Observation
E3,E2 (agree),,https://pipenv.kennethreitz.org/en/latest/dev/contributing/,_MovedItems,Lazy loading of moved objects,1,Lazy loading of moved objects,,,,,,,,,,,,,,,,,
E3,E2 (agree),,,BrokenStdoutLoggingError,Raised if BrokenPipeError occurs for the stdout stream while logging.,1,Raised if BrokenPipeError occurs for the stdout stream while logging.,,,,,,,,,,,,,,,,,
E3,E2 (agree),,,ColoredString,Enhanced string for __len__ operations on Colored output.,1,Enhanced string for __len__ operations on Colored output.,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,CommandError,Raised when there is an error in command-line arguments,1,Raised when there is an error in command-line arguments,,,,,,,,,,,,,Raised when there is an error in command-line arguments,,,,
E3,E1 (agree),,,ConnectionError,A Connection error occurred.,1,A Connection error occurred.,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,CONSOLE_SCREEN_BUFFER_INFO,struct in wincon.h.,1,struct in wincon.h.,,,,,,,,,,,,,,,,,
E3,,E4 (agree),,ConvertingTuple,A converting tuple wrapper.,1,A converting tuple wrapper.,,,,,,,,,,,,,,,,,
E3,,E4 (agree),,Date,A date literal.,1,A date literal.,,,,,,,,,,,,,,,,,
E3,E2 (agree),,,ExtractError,General exception for extract errors.,1,General exception for extract errors.,,,,,,,,,,,,,,,,,
E2,E1 (agree),,,Filter,Alphabetizes attributes for elements,1,Alphabetizes attributes for elements,,,,,,,,,,,,,,,,,
E2,E1 (agree),,,Filter,Sanitizes token stream of XHTML+MathML+SVG and of inline style attributes,1,Sanitizes token stream of XHTML+MathML+SVG and of inline style attributes,,,,,,,,,,,,,,,,,
E2,E1 (agree),,,HTTPError,An HTTP error occurred.,1,An HTTP error occurred.,,,,,,,,,,,,,,,,,
E2,,E3 (agree),,InCellPhase,http://www.whatwg.org/specs/web-apps/current-work/in-cell,1,,,,,,,,,http://www.whatwg.org/specs/web-apps/current-work/in-cell,,,,,,,,,
E2,,E3 (agree),,InsecurePlatformWarning,Warned when certain SSL configuration is not available on a platform.,1,Warned when certain SSL configuration is not available on a platform.,,,,,,,,,,,,,,,,,
E2,,E3 (agree),,InspectedValidator,Metaclass for all validators ,1,Metaclass for all validators ,,,,,,,,,,,,,,,,,
E2,,E4 (agree),,InvalidDateError,A date field was improperly specified.,1,A date field was improperly specified.,,,,,,,,,,,,,,,,,
E2,,E4 (disagree),,InvalidHeaderError,Exception for invalid headers.,1,Exception for invalid headers.,,,,,,,,,,,,,,,,,
E2,,E4 (disagree),,InvalidVersion,"An invalid version was found, users should refer to PEP 440.",1,"An invalid version was found, ",users should refer to PEP 440.,,,,,,,,,,users should refer to PEP 440.,,,,,,
E2,E1 (agree),,,Kanji,Unicode set for Kanji Unicode Character Range,1,Unicode set for Kanji Unicode Character Range,,,,,,,,,,,,,,,,,
E4,E2 (agree),,,Katakana,Unicode set for Katakana  Unicode Character Range,1,Unicode set for Katakana  Unicode Character Range,,,,,,,,,,,,,,,,,
E4,E2 (agree),,,MemoizedZipManifests,Memoized zipfile manifests.,1,Memoized zipfile manifests.,,,,,,,,,,,,,,,,,
E4,E2 (agree),,,MetadataMissingError,A required metadata is missing,1,A required metadata is missing,,,,,,,,,,,,,,,,,
E4,E1 (disagree),,,Module_six_moves_urllib_parse,Lazy loading of moved objects in six.moves.urllib_parse,1,Lazy loading of moved objects in six.moves.urllib_parse,,,,,,,,,,,,,,,,,
E4,E1 (disagree),,,Module_six_moves_urllib_request,Lazy loading of moved objects in six.moves.urllib_request,1,Lazy loading of moved objects in six.moves.urllib_request,,,,,,,,,,,,,,,,,
E4,E1 (disagree),,,Module_six_moves_urllib_response,Lazy loading of moved objects in six.moves.urllib_response,1,Lazy loading of moved objects in six.moves.urllib_response,,,,,,,,,,,,,,,,,
E4,,E3 (agree),,Mul,Multiplies the left with the right node.,1,Multiplies the left with the right node.,,,,,,,,,,,,,,,,,
E4,,E3 (agree),,NativeEnvironment,An environment that renders templates to native Python types.,1,An environment that renders templates to native Python types.,,,,,,,,,,,,,,,,,
E4,,E3 (agree),,Node,Represents an item in the tree,1,Represents an item in the tree,,,,,,,,,,,,,,,,,
E4,E2 (agree),,,ParserElement,Abstract base level parser element class.,1,Abstract base level parser element class.,,,,,,,,,,,,,,,,,
E1,E2 (agree),,,ParseResultBytes,Compatibility shim for the urlparse.ParseResultBytes object.,1,Compatibility shim for the urlparse.ParseResultBytes object.,,,,,,,,,,,,,,,,,
E1,E2 (agree),,,ProcessedTraceback,Holds a Jinja preprocessed traceback for printing or reraising.,1,Holds a Jinja preprocessed traceback for printing or reraising.,,,,,,,,,,,,,,,,,
E1,E2 (agree),,,ReadError,Raised when an archive cannot be read,1,Raised when an archive cannot be read,,,,,,,,,,,,,,,,,
E1,,E3 (agree),,RequirementsFileParseError,Raised when a general error occurs parsing a requirements file line.,1,Raised when a general error occurs parsing a requirements file line.,,,,,,,,,,,,,,,,,
E1,,E3 (agree),,ResourceFinder,Resource finder for file system resources.,1,Resource finder for file system resources.,,,,,,,,,,,,,,,,,
E1,,E3 (agree),,HashMissing,A hash was needed for a requirement but is absent.,1,A hash was needed for a requirement but is absent.,,,,,,,,,,,,,,,,,
E1,,E4 (agree),,ResourceManager,Manage resource extraction and packages,1,Manage resource extraction and packages,,,,,,,,,,,,,,,,,
E1,,E4 (agree),,ResponseError,Used as a container for an error reason supplied in a MaxRetryError.,1,,Used as a container for an error reason supplied in a MaxRetryError.,,,,,,,,,,,,,,,,
E1,,E4 (agree),,PipError,Base pip exception,1,Base pip exception,,,,,,,,,,,,,,,,,
E1,E2 (agree),,,ResponseNotChunked,Response needs to be chunked in order to read it as chunks.,1,,Response needs to be chunked in order to read it as chunks.,,,,,,,,,,,,,,,,
E1,E2 (agree),,,Token,Token class.,1,Token class.,,,,,,,,,,,,,,,,,
E3,E2 (agree),,,Trie,Abstract base class for tries,1,Abstract base class for tries,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,ZipResourceFinder,Resource finder for resources in .zip files.,1,Resource finder for resources in .zip files.,,,,,,,,,,,,,,,,,
E3,E1 (agree),,,_PathParents,"This object provides sequence-like access to the logical ancestors
of a path.  Don't try to construct it yourself.",2,"This object provides sequence-like access to the logical ancestors
of a path.",,,,,,,,,,  Don't try to construct it yourself.,,,,,,,
E3,,E4 (agree),,BaseCommand,A CLI command.,2,A CLI command.,,,,,,,,,,,,,,,,,
E3,,E4 (agree),,CallBlock,"
Like a macro without a name but a call instead.  `call` is called with
the unnamed macro as `caller` argument this node holds.",2,,," `call` is called with
the unnamed macro as `caller` argument this node holds.",,,Like a macro without a name but a call instead. ,,,,,,,,,,,,
E3,E2 (agree),,,CookieConflictError,"
There are two cookies that meet the criteria specified in the cookie jar.
Use .get and .set and include domain and path args in order to be more specific.",2,There are two cookies that meet the criteria specified in the cookie jar.,,,,,Use .get and .set and include domain and path args in order to be more specific.,,,,,,Use .get and .set and include domain and path args in order to be more specific.,,,,,,
E2,E1 (agree),,,DependencyWarning,"Warned when an attempt is made to import a module with missing optional
dependencies.",2,Warned when an attempt is made to import a module with missing optional dependencies.,,,,,,,,,,,,,,,,,
E2,,E3 (agree),,DirectedGraph,A graph structure with directed edges.,2,A graph structure with directed edges.,,,,,,,,,,,,,,,,,
E2,,E3 (agree),,DocumentErrorTree,"Implements a dict-like class to query errors by indexes following the
structure of a validated document. ",2,Implements a dict-like class to query errors ,,,by indexes following the structure of a validated document.,,,,,,,,,,,,,,
E2,,E4 (disagree),,EOF,"Raised when EOF is read from a child.
This usually means the child has exited.",2,This usually means the child has exited.,,,,,,,"Raised when EOF is read from a child.
",,,,,,,,,,
E2,,E4 (agree),,ExceptionPexpect,Base class for all exceptions raised by this module.,2,Base class for all exceptions raised by this module.,,,,,,,,,,,,,,,,,
E2,E1 (agree),,,FakeFile,"Wrap a list of lines in an object with readline() to make
ConfigParser happy.",2,Wrap a list of lines in an object ,,,with readline() to make ConfigParser happy.,,,,,,,,,,,,,,
E4,E2 (agree),,,Getattr,"Get an attribute or item from an expression that is a ascii-only
bytestring and prefer the attribute.",2,,"Get an attribute or item from an expression that is a ascii-only
bytestring and prefer the attribute.",,,,,"Get an attribute or item from an expression that is a ascii-only
bytestring and prefer the attribute.",,,,,,,,,,,
E4,E1 (agree),,,NoMatch,A token that will never match.,2,A token that will never match.,,,,,,,,,,,,,,,,,
E4,E1 (agree),,,PackageIndex,Represents a Package Index and provides easier access to endpoints,2,Represents a Package Index and provides easier access to endpoints,,,,,,,,,,,,,,,,,
E4,,E3 (disagree),,ParseFatalException,"user-throwable exception thrown when inconsistent parse content
is found; stops all parsing immediately",2,,,,,,"user-throwable exception thrown when inconsistent parse content
is found; stops all parsing immediately",,"user-throwable exception thrown when inconsistent parse content
is found; stops all parsing immediately",,,,,,"user-throwable exception thrown when inconsistent parse content
is found; ",,,,
E4,,E3 (agree),,RequestException,"There was an ambiguous exception that occurred while handling your
request.",2,,,,,,,,"There was an ambiguous exception that occurred while handling your
request.",,,,,,,,,,
E4,E2 (agree),,,RequiresPythonCache,Cache a candidate's Requires-Python information.,2,Cache a candidate's Requires-Python information.,,,,,,,Cache a candidate's Requires-Python information.,,,,,,,,,,
E1,,E3 (agree),,SchemaValidatorMixin,"
This validator mixin provides mechanics to validate schemas passed to a Cerberus
validator. ",2,"
This validator mixin provides mechanics to validate schemas passed to a Cerberus
validator. ",,,,,,,,,,,,,,,,,
E1,,E3 (agree),,TarFile,The TarFile Class provides an interface to tar archives.,2,The TarFile Class provides an interface to tar archives.,,,,,,,,,,,,,,,,,
E1,,E4 (agree),,TokenStreamIterator,"
The iterator for tokenstreams.  Iterate over the stream
until the eof token is reached.",2,The iterator for tokenstreams.,,,"Iterate over the stream
until the eof token is reached.",,,,,,,,,,,,,,
E1,,E4 (agree),,UndefinedEnvironmentName,"A name was attempted to be used that does not exist inside of the
environment.",2,"A name was attempted to be used that does not exist inside of the
environment.",,,,,,,,,,,,,,,,,
E1,E2 (agree),,,SafeFileCache,"A file based cache which is safe to use even when the target directory may
not be accessible or writable.",2,"A file based cache which is safe to use even when the target directory may
not be accessible or writable.",,,,,,,,,,,,,,,,,
E1,E2 (agree),,,PyPIJSONLocator,"This locator uses PyPI''s JSON interface. It''s very limited in functionality
and probably not worth using.",2,,,,This locator uses PyPI''s JSON interface.,,,,,,,"It''s very limited in functionality
and probably not worth using.",,,,,,,
E3,E2 (agree),,,_FileInFile,"
A thin wrapper around an existing file object that
provides a part of its data as an individual file
object.",3,"A thin wrapper around an existing file object that
provides a part of its data as an individual file
object.",,,,,,,,,,,,,,,,,
E3,E1 (agree),,,RequirementUninstaller,"
A context manager to remove a package for the inner block.

This uses `UninstallPathSet` to control the workflow. If the inner block
exits correctly, the uninstallation is committed, otherwise rolled back.",4,"
A context manager to remove a package for the inner block.",,,"
This uses `UninstallPathSet` to control the workflow. If the inner block
exits correctly, the uninstallation is committed, otherwise rolled back.",,,,,,,,,,,,,,
E3,E1 (agree),,,InternalName,"
An internal name in the compiler.  You cannot create these nodes
yourself but the parser provides a
:meth:`~jinja2.parser.Parser.free_identifier` method that creates
a new identifier for you.  This identifier is not available from the
template and is not threated specially by the compiler.",5,An internal name in the compiler,,,,," You cannot create these nodes
yourself but the parser provides a
:meth:`~jinja2.parser.Parser.free_identifier` method that creates
a new identifier for you.  This identifier is not available from the
template and is not threated specially by the compiler.",,,,," You cannot create these nodes
yourself but the parser provides a
:meth:`~jinja2.parser.Parser.free_identifier` method that creates
a new identifier for you.  This identifier is not available from the
template and is not threated specially by the compiler.",,,,,,,
E3,,E4 (agree),,LRUCache,"
A simple LRU Cache implementation.
this is fast for small capacities (something below 1000) but doesn't
    scale.  But as long as it's only used as storage for templates this
    won't do any harm.",5,A simple LRU Cache implementation.,,,,,"this is fast for small capacities (something below 1000) but doesn't
    scale.  But as long as it's only used as storage for templates this
    won't do any harm.",,,,,"this is fast for small capacities (something below 1000) but doesn't
    scale.  But as long as it's only used as storage for templates this
    won't do any harm.",,,,,,,
E3,,E4 (agree),,_BZ2Proxy,"
Small proxy class that enables external file object
support for ""r:bz2"" and ""w:bz2"" modes. This is actually
a workaround for a limitation in bz2 module's BZ2File
class which (unlike gzip.GzipFile) has no support for
a file object argument.",5,"Small proxy class that enables external file object
support for ""r:bz2"" and ""w:bz2"" modes.",,,,,"This is actually
a workaround for a limitation in bz2 module's BZ2File
class which (unlike gzip.GzipFile) has no support for
a file object argument.",,,,,"This is actually
a workaround for a limitation in bz2 module's BZ2File
class which (unlike gzip.GzipFile) has no support for
a file object argument.",,,,,,,
E2,E1 (agree),,,Bucket,"
Buckets are used to store the bytecode for one template.  It's created
and initialized by the bytecode cache and passed to the loading functions.

The buckets get an internal checksum from the cache assigned and use this
to automatically reject outdated cache material.  Individual bytecode
cache subclasses don't have to care about cache invalidation.",6,"
Buckets are used to store the bytecode for one template.  It's created
and initialized by the bytecode cache and passed to the loading functions.

",,,"The buckets get an internal checksum from the cache assigned and use this
to automatically reject outdated cache material. ",,,,,,,,,,,,,Individual bytecode cache subclasses don't have to care about cache invalidation.,
E2,,E3 (agree),,fdspawn,"This is like pexpect.spawn but allows you to supply your own open file
descriptor. For example, you could use it to read through a file looking
for patterns, or to control a modem or serial device. ",3,"This is like pexpect.spawn but allows you to supply your own open file
descriptor. ","For example, you could use it to read through a file looking
for patterns, or to control a modem or serial device. ",,,,,,,,,,,,,,,,
E2,,E3 (agree),,ParseError,"
This error occurs when the parser encounters a syntax error
in the TOML being parsed. The error references the line and
location within the line where the error was encountered.",3,"
This error occurs when the parser encounters a syntax error
in the TOML being parsed. ",,,The error references the line and location within the line where the error was encountered.,,,,,,,,,,,,,,
E2,,E4 (agree),,DataViewSequence,"
A sequence of data views.

Each entry is an instance of `item_class`.",3,"
A sequence of data views.
",,"
Each entry is an instance of `item_class`.",,,,,,,,,,,,,,,
E2,,E4 (agree),,HTMLParser,"
HTML parser

Generates a tree structure from a stream of (possibly malformed) HTML.",3,"
HTML parser

Generates a tree structure from a stream of (possibly malformed) HTML.",,,,,,,,,,,,,,,,,
E4,E2 (agree),,,Resource,"
A class representing an in-package resource, such as a data file. This is
not normally instantiated by user code, but rather by a
:class:`ResourceFinder` which manages the resource.",3,"A class representing an in-package resource, such as a data file.",,,,,"This is
not normally instantiated by user code, but rather by a
:class:`ResourceFinder` which manages the resource.",,,,,,,,,,,,
E4,E1 (disagree),,,Distribution,"
A base class for distributions, whether installed or from indexes.
Either way, it must have some metadata, so that's all that's needed
for construction.",3,"A base class for distributions, whether installed or from indexes.","Either way, it must have some metadata, so that's all that's needed
for construction.",,,,,,,,,,,,,,,,
E4,E1 (agree),,,ParseSyntaxException,"
just like :class:`ParseFatalException`, but thrown internally
when an :class:`ErrorStop<And._ErrorStop>` ('-' operator) indicates
that parsing is to stop immediately because an unbacktrackable
syntax error has been found.",4,,,,,,,,"just like :class:`ParseFatalException`, but thrown internally
when an :class:`ErrorStop<And._ErrorStop>` ('-' operator) indicates
that parsing is to stop immediately because an unbacktrackable
syntax error has been found.",,,,,,,,,,
E4,,E3 (disagree),,KeyType,"
The type of a Key.

Keys can be bare (unquoted), or quoted using basic (""), or literal (')
quotes following the same escaping rules as single-line StringType.",4,The type of a Key.,,"Keys can be bare (unquoted), or quoted using basic (""), or literal (')
quotes following the same escaping rules as single-line StringType.","Keys can be bare (unquoted), or quoted using basic (""), or literal (')
quotes following the same escaping rules as single-line StringType.",,,,,,,,,,,,,,
E4,,E3 (agree),,InstalledDistribution,"
Created with the *path* of the ``.dist-info`` directory provided to the
constructor. It reads the metadata contained in ``pydist.json`` when it is
instantiated., or uses a passed in Metadata instance (useful for when
dry-run mode is being used).",4,,"It reads the metadata contained in ``pydist.json`` when it is
instantiated., or uses a passed in Metadata instance (useful for when
dry-run mode is being used).",,,,Created with the *path* of the ``.dist-info`` directory provided to the constructor.,,,,,,,,,,,,
E1,,E3 (agree),,Argument,"
Arguments are positional parameters to a command.  They generally
provide fewer features than options but can have infinite ``nargs``
and are required by default.

All parameters are passed onwards to the parameter constructor.",5,Arguments are positional parameters to a command.,"They generally
provide fewer features than options but can have infinite ``nargs``
and are required by default.",,All parameters are passed onwards to the parameter constructor,,,,,,,,,,,,,,
E1,,E3 (agree),,TreeBuilder,"
Base treebuilder implementation

* documentClass - the class to use for the bottommost node of a document
* elementClass - the class to use for HTML Elements
* commentClass - the class to use for comments
* doctypeClass - the class to use for doctypes",6,Base treebuilder implementation,"* documentClass - the class to use for the bottommost node of a document
* elementClass - the class to use for HTML Elements
* commentClass - the class to use for comments
* doctypeClass - the class to use for doctypes",,,,,,,,,,,,,,,,
E1,E2 (agree with E4),E4 (disagree),,PacifyFlushWrapper,"
This wrapper is used to catch and suppress BrokenPipeErrors resulting
from ``.flush()`` being called on broken pipe during the shutdown/final-GC
of the Python interpreter. Notably ``.flush()`` is always called on
``sys.stdout`` and ``sys.stderr``. So as to have minimal impact on any
other cleanup code, and the case where the underlying file is not a broken
pipe, all calls and attributes are proxied.",6,"This wrapper is used to catch and suppress BrokenPipeErrors resulting
from ``.flush()`` being called on broken pipe during the shutdown/final-GC
of the Python interpreter.",,,"This wrapper is used to catch and suppress BrokenPipeErrors resulting
from ``.flush()`` being called on broken pipe during the shutdown/final-GC
of the Python interpreter.


Notably ``.flush()`` is always called on
``sys.stdout`` and ``sys.stderr``. So as to have minimal impact on any
other cleanup code, and the case where the underlying file is not a broken
pipe, all calls and attributes are proxied.",,,,,,,,,,,,,,
E1,,E4 (agree),,NotMyLock,"
Raised when an attempt is made to unlock a file someone else locked.

>>> try:
...   raise NotMyLock
... except UnlockError:
...   Pass",6,"Raised when an attempt is made to unlock a file someone else locked.
",">>> try:
...   raise NotMyLock
... except UnlockError:
...   Pass",,,,,,,,,,,,,,,,
E1,E2 (agree),,,LockFailed,"
Lock file creation failed for some other reason.

>>> try:
...   raise LockFailed
... except LockError:
...   Pass",6,"Lock file creation failed for some other reason.
",">>> try:
...   raise LockFailed
... except LockError:
...   Pass",,,,,,,,,,,,,,,,
E3,E2 (disagree),,,UnlockError,"
Base class for errors arising from attempts to release the lock.

>>> try:
...   raise UnlockError
... except Error:
...   Pass",6,Base class for errors arising from attempts to release the lock.,">>> try:
...   raise UnlockError
... except Error:
...   Pass",,,,,,,,,,,,,,,,
E3,E2 (agree),,,PrefixLoader,"
A loader that is passed a dict of loaders where each loader is bound
to a prefix.  The prefix is delimited from the template by a slash per
default, which can be changed by setting the `delimiter` argument to
something else::

    loader = PrefixLoader({
        'app1':     PackageLoader('mypackage.app1'),
        'app2':     PackageLoader('mypackage.app2')
    })

By loading ``'app1/index.html'`` the file from the app1 package is loaded,
by loading ``'app2/index.html'`` the file from the second.",12,"
A loader that is passed a dict of loaders where each loader is bound
to a prefix."," The prefix is delimited from the template by a slash per
default, which can be changed by setting the `delimiter` argument to
something else::

    loader = PrefixLoader({
        'app1':     PackageLoader('mypackage.app1'),
        'app2':     PackageLoader('mypackage.app2')
    })

By loading ``'app1/index.html'`` the file from the app1 package is loaded,
by loading ``'app2/index.html'`` the file from the second.",," The prefix is delimited from the template by a slash per
default, which can be changed by setting the `delimiter` argument to
something else::",,,,,,,,,,,,,,
E3,E1 (agree),,,And,"
Requires all given :class:`ParseExpression` s to be found in the given order.
Expressions may be separated by whitespace.
May be constructed using the ``'+'`` operator.
May also be constructed using the ``'-'`` operator, which will
suppress backtracking.

Example::

    integer = Word(nums)
    name_expr = OneOrMore(Word(alphas))

    expr = And([integer(""id""),name_expr(""name""),integer(""age"")])
    # more easily written as:
    expr = integer(""id"") + name_expr(""name"") + integer(""age"")",14,,"Example::

    integer = Word(nums)
    name_expr = OneOrMore(Word(alphas))

    expr = And([integer(""id""),name_expr(""name""),integer(""age"")])
    # more easily written as:
    expr = integer(""id"") + name_expr(""name"") + integer(""age"")",,"Expressions may be separated by whitespace.
May be constructed using the ``'+'`` operator.
May also be constructed using the ``'-'`` operator, which will
suppress backtracking.",,"Requires all given :class:`ParseExpression` s to be found in the given order.
Expressions may be separated by whitespace.
May be constructed using the ``'+'`` operator.
May also be constructed using the ``'-'`` operator, which will
suppress backtracking.",,,,,,,,"Requires all given :class:`ParseExpression` s to be found in the given order.
Expressions may be separated by whitespace.
May be constructed using the ``'+'`` operator.
May also be constructed using the ``'-'`` operator, which will
suppress backtracking.
",,,,
E2,E1 (agree),,,FileMetadata,"
Metadata handler for standalone PKG-INFO files

Usage::

    metadata = FileMetadata(""/path/to/PKG-INFO"")

This provider rejects all data and metadata requests except for PKG-INFO,
which is treated as existing, and will be the contents of the file at
the provided location.
Metadata handler for standalone PKG-INFO files

Usage::

    metadata = FileMetadata(""/path/to/PKG-INFO"")

This provider rejects all data and metadata requests except for PKG-INFO,
which is treated as existing, and will be the contents of the file at
the provided location.",9,"Metadata handler for standalone PKG-INFO files
","
Usage::

    metadata = FileMetadata(""/path/to/PKG-INFO"")
Usage::

    metadata = FileMetadata(""/path/to/PKG-INFO"")",,"
This provider rejects all data and metadata requests except for PKG-INFO,
which is treated as existing, and will be the contents of the file at
the provided location.
Metadata handler for standalone PKG-INFO files



This provider rejects all data and metadata requests except for PKG-INFO,
which is treated as existing, and will be the contents of the file at
the provided location.",,,,,,,,,,,,,,
E2,E1 (agree),,,MethodDispatcher,"
Dict with 2 special properties:

On initiation, keys that are lists, sets or tuples are converted to
multiple keys so accessing any one of the items in the original
list-like object returns the matching value

md = MethodDispatcher({(""foo"", ""bar""):""baz""})
md[""foo""] == ""baz""

A default value which can be set through the default attribute.",10,"Dict with 2 special properties:

","
A default value which can be set through the default attribute.",,"On initiation, keys that are lists, sets or tuples are converted to
multiple keys so accessing any one of the items in the original
list-like object returns the matching value


md = MethodDispatcher({(""foo"", ""bar""):""baz""}) md[""foo""] == ""baz""
A default value which can be set through the default attribute.",,,,,,,,,,,,,,
E2,,E3 (disagree),,PoolManager,"
Allows for arbitrary requests while transparently keeping track of
necessary connection pools for you.

:param num_pools:
    Number of connection pools to cache before discarding the least
    recently used pool.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param \**connection_pool_kw:
    Additional parameters are used to create fresh
    :class:`urllib3.connectionpool.ConnectionPool` instances.

Example::

    >>> manager = PoolManager(num_pools=2)
    >>> r = manager.request('GET', 'http://google.com/')
    >>> r = manager.request('GET', 'http://google.com/mail')
    >>> r = manager.request('GET', 'http://yahoo.com/')
    >>> len(manager.pools)
    ",23,"Allows for arbitrary requests while transparently keeping track of
necessary connection pools for you.
","
Example::

    >>> manager = PoolManager(num_pools=2)
    >>> r = manager.request('GET', 'http://google.com/')
    >>> r = manager.request('GET', 'http://google.com/mail')
    >>> r = manager.request('GET', 'http://yahoo.com/')
    >>> len(manager.pools)","
:param num_pools:
    Number of connection pools to cache before discarding the least
    recently used pool.

:param headers:
    Headers to include with all requests, unless other headers are given
    explicitly.

:param \**connection_pool_kw:
    Additional parameters are used to create fresh
    :class:`urllib3.connectionpool.ConnectionPool` instances.
",,,,,,,,,,,,,,,
E4,E2 (agree),,,HebrewProber,"
The prober is divided between two SBCharSetProbers and a HebrewProber,
all of which are managed, created, fed data, inquired and deleted by the
SBCSGroupProber. The two SBCharSetProbers identify that the text is in
fact some kind of Hebrew, Logical or Visual. The final decision about which
one is it is made by the HebrewProber by combining final-letter scores
with the scores of the two SBCharSetProbers to produce a final answer.
The SBCSGroupProber is responsible for stripping the original text of HTML
tags, English characters, numbers, low-ASCII punctuation characters, spaces
and new lines. It reduces any sequence of such characters to a single space.
The buffer fed to each prober in the SBCS group prober is pure text in
high-ASCII.
The two SBCharSetProbers (model probers) share the same language model:
Win1255Model.
The first SBCharSetProber uses the model normally as any other
SBCharSetProber does, to recognize windows-1255, upon which this model was
built. The second SBCharSetProber is told to make the pair-of-letter
lookup in the language model backwards. This in practice exactly simulates
a visual Hebrew model using the windows-1255 logical Hebrew model.
The HebrewProber is not using any language model. All it does is look for
final-letter evidence suggesting the text is either logical Hebrew or visual
Hebrew. Disjointed from the model probers, the results of the HebrewProber
alone are meaningless. HebrewProber always returns 0.00 as confidence
since it never identifies a charset by itself. Instead, the pointer to the
HebrewProber is passed to the model probers as a helper ""Name Prober"".
When the Group prober receives a positive identification from any prober,
it asks for the name of the charset identified. If the prober queried is a
Hebrew model prober, the model prober forwards the call to the
HebrewProber to make the final decision. In the HebrewProber, the
decision is made according to the final-letters scores maintained and Both
model probers scores. The answer is returned in the form of the name of the
charset identified, either ""windows-1255"" or ""ISO-8859-8""",31,It reduces any sequence of such characters to a single space.,"The final decision about which one is it is made by the HebrewProber by combining final-letter scores
with the scores of the two SBCharSetProbers to produce a final answer.

The first SBCharSetProber uses the model normally as any other SBCharSetProber does, to recognize windows-1255, upon which this model was
built. The second SBCharSetProber is told to make the pair-of-letter lookup in the language model backwards.

All it does is look for final-letter evidence suggesting the text is either logical Hebrew or visual Hebrew.

HebrewProber always returns 0.00 as confidence since it never identifies a charset by itself. Instead, the pointer to the HebrewProber is passed to the model probers as a helper ""Name Prober"".

When the Group prober receives a positive identification from any prober, it asks for the name of the charset identified. If the prober queried is a Hebrew model prober, the model prober forwards the call to the HebrewProber to make the final decision.

In the HebrewProber, the decision is made according to the final-letters scores maintained and Both model probers scores. The answer is returned in the form of the name of the charset identified, either ""windows-1255"" or ""ISO-8859-8""",,,,"The prober is divided between two SBCharSetProbers and a HebrewProber, all of which are managed, created, fed data, inquired and deleted by the SBCSGroupProber.

The two SBCharSetProbers identify that the text is in
fact some kind of Hebrew, Logical or Visual.

The SBCSGroupProber is responsible for stripping the original text of HTML tags, English characters, numbers, low-ASCII punctuation characters, spaces and new lines.

The buffer fed to each prober in the SBCS group prober is pure text in high-ASCII.
The two SBCharSetProbers (model probers) share the same language model: Win1255Model.

This in practice exactly simulates a visual Hebrew model using the windows-1255 logical Hebrew model. The HebrewProber is not using any language model.

Disjointed from the model probers, the results of the HebrewProber
alone are meaningless.",,,,,,,,,,,,
E4,E2 (agree),,,Option,"
Options are usually optional values on the command line and
have some extra features that arguments don't have.

All other parameters are passed onwards to the parameter constructor.

:param show_default: controls if the default value should be shown on the
                     help page. Normally, defaults are not shown. If this
                     value is a string, it shows the string instead of the
                     value. This is particularly useful for dynamic options.
:param show_envvar: controls if an environment variable should be shown on
                    the help page.  Normally, environment variables
                    are not shown.
:param prompt: if set to `True` or a non empty string then the user will be
               prompted for input.  If set to `True` the prompt will be the
               option name capitalized.
:param confirmation_prompt: if set then the value will need to be confirmed
                            if it was prompted for.
:param hide_input: if this is `True` then the input on the prompt will be
                   hidden from the user.  This is useful for password
                   input.
:param is_flag: forces this option to act as a flag.  The default is
                auto detection.
:param flag_value: which value should be used for this flag if it's
                   enabled.  This is set to a boolean automatically if
                   the option string contains a slash to mark two options.
:param multiple: if this is set to `True` then the argument is accepted
                 multiple times and recorded.  This is similar to ``nargs``
                 in how it works but supports arbitrary number of
                 arguments.
:param count: this flag makes an option increment an integer.
:param allow_from_autoenv: if this is enabled then the value of this
                           parameter will be pulled from an environment
                           variable in case a prefix is defined on the
                           context.
:param help: the help string.
:param hidden: hide this option from help outputs.",37,"Options are usually optional values on the command line and
have some extra features that arguments don't have.",All other parameters are passed onwards to the parameter constructor.,":param show_default: controls if the default value should be shown on the
                     help page. Normally, defaults are not shown. If this
                     value is a string, it shows the string instead of the
                     value. This is particularly useful for dynamic options.
:param show_envvar: controls if an environment variable should be shown on
                    the help page.  Normally, environment variables
                    are not shown.
:param prompt: if set to `True` or a non empty string then the user will be
               prompted for input.  If set to `True` the prompt will be the
               option name capitalized.
:param confirmation_prompt: if set then the value will need to be confirmed
                            if it was prompted for.
:param hide_input: if this is `True` then the input on the prompt will be
                   hidden from the user.  This is useful for password
                   input.
:param is_flag: forces this option to act as a flag.  The default is
                auto detection.
:param flag_value: which value should be used for this flag if it's
                   enabled.  This is set to a boolean automatically if
                   the option string contains a slash to mark two options.
:param multiple: if this is set to `True` then the argument is accepted
                 multiple times and recorded.  This is similar to ``nargs``
                 in how it works but supports arbitrary number of
                 arguments.
:param count: this flag makes an option increment an integer.
:param allow_from_autoenv: if this is enabled then the value of this
                           parameter will be pulled from an environment
                           variable in case a prefix is defined on the
                           context.
:param help: the help string.
:param hidden: hide this option from help outputs.",,,,,,,,,,,,,,,
E4,E1 (agree),,,Request,"
A user-created :class:`Request <Request>` object.

Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

:param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> req.prepare()
  <PreparedRequest [GET]>",26,A user-created :class:`Request <Request>` object.,"Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> req.prepare()
  <PreparedRequest [GET]>",":param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL. If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.",,,"Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.",,,,,,,,,,,,
E1,E2 (agree),,,SkipTo,"
Token for skipping over all undefined text until the matched
expression is found.

Parameters:
 - expr - target expression marking the end of the data to be skipped
 - include - (default= ``False``) if True, the target expression is also parsed
      (the skipped text and target expression are returned as a 2-element list).
 - ignore - (default= ``None``) used to define grammars (typically quoted strings and
      comments) that might contain false matches to the target expression
 - failOn - (default= ``None``) define expressions that are not allowed to be
      included in the skipped test; if found before the target expression is found,
      the SkipTo is not a match

Example::

    report = '''
        Outstanding Issues Report - 1 Jan 2000

           # | Severity | Description                               |  Days Open
        -----+----------+-------------------------------------------+-----------
         101 | Critical | Intermittent system crash                 |          6
          94 | Cosmetic | Spelling error on Login ('log|n')         |         14
          79 | Minor    | System slow when running too many reports |         47
        '''
    integer = Word(nums)
    SEP = Suppress('|')
    # use SkipTo to simply match everything up until the next SEP
    # - ignore quoted strings, so that a '|' character inside a quoted string does not match
    # - parse action will call token.strip() for each matched token, i.e., the description body
    string_data = SkipTo(SEP, ignore=quotedString)
    string_data.setParseAction(tokenMap(str.strip))
    ticket_expr = (integer(""issue_num"") + SEP
                  + string_data(""sev"") + SEP
                  + string_data(""desc"") + SEP
                  + integer(""days_open""))

    for tkt in ticket_expr.searchString(report):
        print tkt.dump()

prints::

    ['101', 'Critical', 'Intermittent system crash', '6']
    - days_open: 6
    - desc: Intermittent system crash
    - issue_num: 101
    - sev: Critical
    ['94', 'Cosmetic', ""Spelling error on Login ('log|n')"", '14']
    - days_open: 14
    - desc: Spelling error on Login ('log|n')
    - issue_num: 94
    - sev: Cosmetic
    ['79', 'Minor', 'System slow when running too many reports', '47']
    - days_open: 47
    - desc: System slow when running too many reports
    - issue_num: 79
    - sev: Minor",56,"Token for skipping over all undefined text until the matched
expression is found.
","Example::

    report = '''
        Outstanding Issues Report - 1 Jan 2000

           # | Severity | Description                               |  Days Open
        -----+----------+-------------------------------------------+-----------
         101 | Critical | Intermittent system crash                 |          6
          94 | Cosmetic | Spelling error on Login ('log|n')         |         14
          79 | Minor    | System slow when running too many reports |         47
        '''
    integer = Word(nums)
    SEP = Suppress('|')
    # use SkipTo to simply match everything up until the next SEP
    # - ignore quoted strings, so that a '|' character inside a quoted string does not match
    # - parse action will call token.strip() for each matched token, i.e., the description body
    string_data = SkipTo(SEP, ignore=quotedString)
    string_data.setParseAction(tokenMap(str.strip))
    ticket_expr = (integer(""issue_num"") + SEP
                  + string_data(""sev"") + SEP
                  + string_data(""desc"") + SEP
                  + integer(""days_open""))

    for tkt in ticket_expr.searchString(report):
        print tkt.dump()

prints::

    ['101', 'Critical', 'Intermittent system crash', '6']
    - days_open: 6
    - desc: Intermittent system crash
    - issue_num: 101
    - sev: Critical
    ['94', 'Cosmetic', ""Spelling error on Login ('log|n')"", '14']
    - days_open: 14
    - desc: Spelling error on Login ('log|n')
    - issue_num: 94
    - sev: Cosmetic
    ['79', 'Minor', 'System slow when running too many reports', '47']
    - days_open: 47
    - desc: System slow when running too many reports
    - issue_num: 79
    - sev: Minor","Parameters:
 - expr - target expression marking the end of the data to be skipped
 - include - (default= ``False``) if True, the target expression is also parsed
      (the skipped text and target expression are returned as a 2-element list).
 - ignore - (default= ``None``) used to define grammars (typically quoted strings and
      comments) that might contain false matches to the target expression
 - failOn - (default= ``None``) define expressions that are not allowed to be
      included in the skipped test; if found before the target expression is found,
      the SkipTo is not a match
",,,,,,,,,,,,,,,
E1,,E3 (agree),,FileSystemLoader,"
Loads templates from the file system.  This loader can find templates
in folders on the file system and is the preferred way to load them.

The loader takes the path to the templates as string, or if multiple
locations are wanted a list of them which is then looked up in the
given order::

>>> loader = FileSystemLoader('/path/to/templates')
>>> loader = FileSystemLoader(['/path/to/templates', '/other/path'])

Per default the template encoding is ``'utf-8'`` which can be changed
by setting the `encoding` parameter to something else.

To follow symbolic links, set the *followlinks* parameter to ``True``::

>>> loader = FileSystemLoader('/path/to/templates', followlinks=True)

.. versionchanged:: 2.8+
   The *followlinks* parameter was added.",19,"Loads templates from the file system.  This loader can find templates
in folders on the file system and is the preferred way to load them.
","The loader takes the path to the templates as string, or if multiple
locations are wanted a list of them which is then looked up in the
given order::

>>> loader = FileSystemLoader('/path/to/templates')
>>> loader = FileSystemLoader(['/path/to/templates', '/other/path'])

Per default the template encoding is ``'utf-8'`` which can be changed
by setting the `encoding` parameter to something else.

To follow symbolic links, set the *followlinks* parameter to ``True``::
",,,".. versionchanged:: 2.8+
   The *followlinks* parameter was added.",,,,,,,,,,,,,
E1,,E3 (agree),,Retry,"
Retry configuration.

Each retry attempt will create a new Retry object with updated values, so
they can be safely reused.

Retries can be defined as a default for a pool::

    retries = Retry(connect=5, read=2, redirect=5)
    http = PoolManager(retries=retries)
    response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool)::

    response = http.request('GET', 'http://example.com/', retries=Retry(10))

Retries can be disabled by passing ``False``::

    response = http.request('GET', 'http://example.com/', retries=False)

Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
retries are disabled, in which case the causing exception will be raised.

:param int total:
    Total number of retries to allow. Takes precedence over other counts.

    Set to ``None`` to remove this constraint and fall back on other
    counts. It's a good idea to set this to some sensibly-high value to
    account for unexpected edge cases and avoid infinite retry loops.

    Set to ``0`` to fail on the first retry.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int connect:
    How many connection-related errors to retry on.

    These are errors raised before the request is sent to the remote server,
    which we assume has not triggered the server to process the request.

    Set to ``0`` to fail on the first retry of this type.

:param int read:
    How many times to retry on read errors.

    These errors are raised after the request was sent to the server, so the
    request may have side-effects.

    Set to ``0`` to fail on the first retry of this type.

:param int redirect:
    How many redirects to perform. Limit this to avoid infinite redirect
    loops.

    A redirect is a HTTP response with a status code 301, 302, 303, 307 or
    308.

    Set to ``0`` to fail on the first retry of this type.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int status:
    How many times to retry on bad status codes.

    These are retries made on responses, where status code matches
    ``status_forcelist``.

    Set to ``0`` to fail on the first retry of this type.

:param iterable method_whitelist:
    Set of uppercased HTTP method verbs that we should retry on.

    By default, we only retry on methods which are considered to be
    idempotent (multiple requests with the same parameters end with the
    same state). See :attr:`Retry.DEFAULT_METHOD_WHITELIST`.

    Set to a ``False`` value to retry on any verb.

:param iterable status_forcelist:
    A set of integer HTTP status codes that we should force a retry on.
    A retry is initiated if the request method is in ``method_whitelist``
    and the response status code is in ``status_forcelist``.

    By default, this is disabled with ``None``.

:param float backoff_factor:
    A backoff factor to apply between attempts after the second try
    (most errors are resolved immediately by a second try without a
    delay). urllib3 will sleep for::

        {backoff factor} * (2 ** ({number of total retries} - 1))

    seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep
    for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer
    than :attr:`Retry.BACKOFF_MAX`.

    By default, backoff is disabled (set to 0).

:param bool raise_on_redirect: Whether, if the number of redirects is
    exhausted, to raise a MaxRetryError, or to return a response with a
    response code in the 3xx range.

:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
    whether we should raise an exception, or return a response,
    if status falls in ``status_forcelist`` range and retries have
    been exhausted.

:param tuple history: The history of the request encountered during
    each call to :meth:`~Retry.increment`. The list is in the order
    the requests occurred. Each list item is of class :class:`RequestHistory`.

:param bool respect_retry_after_header:
    Whether to respect Retry-After header on status codes defined as
    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

:param iterable remove_headers_on_redirect:
    Sequence of headers to remove from the request when a response
    indicating a redirect is returned before firing off the redirected
    request.",118,"Retry configuration.
","Retries can be defined as a default for a pool::

    retries = Retry(connect=5, read=2, redirect=5)
    http = PoolManager(retries=retries)
    response = http.request('GET', 'http://example.com/')

Or per-request (which overrides the default for the pool)::

    response = http.request('GET', 'http://example.com/', retries=Retry(10))

Retries can be disabled by passing ``False``::

    response = http.request('GET', 'http://example.com/', retries=False)

",":param int total:
    Total number of retries to allow. Takes precedence over other counts.

    Set to ``None`` to remove this constraint and fall back on other
    counts. It's a good idea to set this to some sensibly-high value to
    account for unexpected edge cases and avoid infinite retry loops.

    Set to ``0`` to fail on the first retry.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int connect:
    How many connection-related errors to retry on.

    These are errors raised before the request is sent to the remote server,
    which we assume has not triggered the server to process the request.

    Set to ``0`` to fail on the first retry of this type.

:param int read:
    How many times to retry on read errors.

    These errors are raised after the request was sent to the server, so the
    request may have side-effects.

    Set to ``0`` to fail on the first retry of this type.

:param int redirect:
    How many redirects to perform. Limit this to avoid infinite redirect
    loops.

    A redirect is a HTTP response with a status code 301, 302, 303, 307 or
    308.

    Set to ``0`` to fail on the first retry of this type.

    Set to ``False`` to disable and imply ``raise_on_redirect=False``.

:param int status:
    How many times to retry on bad status codes.

    These are retries made on responses, where status code matches
    ``status_forcelist``.

    Set to ``0`` to fail on the first retry of this type.

:param iterable method_whitelist:
    Set of uppercased HTTP method verbs that we should retry on.

    By default, we only retry on methods which are considered to be
    idempotent (multiple requests with the same parameters end with the
    same state). See :attr:`Retry.DEFAULT_METHOD_WHITELIST`.

    Set to a ``False`` value to retry on any verb.

:param iterable status_forcelist:
    A set of integer HTTP status codes that we should force a retry on.
    A retry is initiated if the request method is in ``method_whitelist``
    and the response status code is in ``status_forcelist``.

    By default, this is disabled with ``None``.

:param float backoff_factor:
    A backoff factor to apply between attempts after the second try
    (most errors are resolved immediately by a second try without a
    delay). urllib3 will sleep for::

        {backoff factor} * (2 ** ({number of total retries} - 1))

    seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep
    for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer
    than :attr:`Retry.BACKOFF_MAX`.

    By default, backoff is disabled (set to 0).

:param bool raise_on_redirect: Whether, if the number of redirects is
    exhausted, to raise a MaxRetryError, or to return a response with a
    response code in the 3xx range.

:param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
    whether we should raise an exception, or return a response,
    if status falls in ``status_forcelist`` range and retries have
    been exhausted.

:param tuple history: The history of the request encountered during
    each call to :meth:`~Retry.increment`. The list is in the order
    the requests occurred. Each list item is of class :class:`RequestHistory`.

:param bool respect_retry_after_header:
    Whether to respect Retry-After header on status codes defined as
    :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

:param iterable remove_headers_on_redirect:
    Sequence of headers to remove from the request when a response
    indicating a redirect is returned before firing off the redirected
    request.","Each retry attempt will create a new Retry object with updated values, so
they can be safely reused.
",,,,"Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
retries are disabled, in which case the causing exception will be raised.
","
        See :ref:`bytecode-cache` for more information.",,,,,,,,,
E3,E1 (agree),,,Environment,"
The core component of Jinja is the `Environment`.  It contains
important shared variables like configuration, filters, tests,
globals and others.  Instances of this class may be modified if
they are not shared and if no template was loaded so far.
Modifications on environments after the first template was loaded
will lead to surprising effects and undefined behavior.

Here are the possible initialization parameters:

    `block_start_string`
        The string marking the beginning of a block.  Defaults to ``'{%'``.

    `block_end_string`
        The string marking the end of a block.  Defaults to ``'%}'``.

    `variable_start_string`
        The string marking the beginning of a print statement.
        Defaults to ``'{{'``.

    `variable_end_string`
        The string marking the end of a print statement.  Defaults to
        ``'}}'``.

    `comment_start_string`
        The string marking the beginning of a comment.  Defaults to ``'{#'``.

    `comment_end_string`
        The string marking the end of a comment.  Defaults to ``'#}'``.

    `line_statement_prefix`
        If given and a string, this will be used as prefix for line based
        statements.  See also :ref:`line-statements`.

    `line_comment_prefix`
        If given and a string, this will be used as prefix for line based
        comments.  See also :ref:`line-statements`.

        .. versionadded:: 2.2

    `trim_blocks`
        If this is set to ``True`` the first newline after a block is
        removed (block, not variable tag!).  Defaults to `False`.

    `lstrip_blocks`
        If this is set to ``True`` leading spaces and tabs are stripped
        from the start of a line to a block.  Defaults to `False`.

    `newline_sequence`
        The sequence that starts a newline.  Must be one of ``'\r'``,
        ``'\n'`` or ``'\r\n'``.  The default is ``'\n'`` which is a
        useful default for Linux and OS X systems as well as web
        applications.

    `keep_trailing_newline`
        Preserve the trailing newline when rendering templates.
        The default is ``False``, which causes a single newline,
        if present, to be stripped from the end of the template.

        .. versionadded:: 2.7

    `extensions`
        List of Jinja extensions to use.  This can either be import paths
        as strings or extension classes.  For more information have a
        look at :ref:`the extensions documentation <jinja-extensions>`.

    `optimized`
        should the optimizer be enabled?  Default is ``True``.

    `undefined`
        :class:`Undefined` or a subclass of it that is used to represent
        undefined values in the template.

    `finalize`
        A callable that can be used to process the result of a variable
        expression before it is output.  For example one can convert
        ``None`` implicitly into an empty string here.

    `autoescape`
        If set to ``True`` the XML/HTML autoescaping feature is enabled by
        default.  For more details about autoescaping see
        :class:`~jinja2.utils.Markup`.  As of Jinja 2.4 this can also
        be a callable that is passed the template name and has to
        return ``True`` or ``False`` depending on autoescape should be
        enabled by default.

        .. versionchanged:: 2.4
           `autoescape` can now be a function

    `loader`
        The template loader for this environment.

    `cache_size`
        The size of the cache.  Per default this is ``400`` which means
        that if more than 400 templates are loaded the loader will clean
        out the least recently used template.  If the cache size is set to
        ``0`` templates are recompiled all the time, if the cache size is
        ``-1`` the cache will not be cleaned.

        .. versionchanged:: 2.8
           The cache size was increased to 400 from a low 50.

    `auto_reload`
        Some loaders load templates from locations where the template
        sources may change (ie: file system or database).  If
        ``auto_reload`` is set to ``True`` (default) every time a template is
        requested the loader checks if the source changed and if yes, it
        will reload the template.  For higher performance it's possible to
        disable that.

    `bytecode_cache`
        If set to a bytecode cache object, this object will provide a
        cache for the internal Jinja bytecode so that templates don't
        have to be parsed if they were not changed.

        See :ref:`bytecode-cache` for more information.

    `enable_async`
        If set to true this enables async template execution which allows
        you to take advantage of newer Python features.  This requires
        Python 3.6 or later.",121,"The core component of Jinja is the `Environment`It contains
important shared variables like configuration, filters, tests,
globals and others.  Instances of this class may be modified if
they are not shared and if no template was loaded so far.
Modifications on environments after the first template was loaded
will lead to surprising effects and undefined behavior.
",,"Here are the possible initialization parameters:

    `block_start_string`
        The string marking the beginning of a block.  Defaults to ``'{%'``.

    `block_end_string`
        The string marking the end of a block.  Defaults to ``'%}'``.

    `variable_start_string`
        The string marking the beginning of a print statement.
        Defaults to ``'{{'``.

    `variable_end_string`
        The string marking the end of a print statement.  Defaults to
        ``'}}'``.

    `comment_start_string`
        The string marking the beginning of a comment.  Defaults to ``'{#'``.

    `comment_end_string`
        The string marking the end of a comment.  Defaults to ``'#}'``.

    `line_statement_prefix`
        If given and a string, this will be used as prefix for line based
        statements.  See also :ref:`line-statements`.

    `line_comment_prefix`
        If given and a string, this will be used as prefix for line based
        comments.  See also :ref:`line-statements`.

        .. versionadded:: 2.2

    `trim_blocks`
        If this is set to ``True`` the first newline after a block is
        removed (block, not variable tag!).  Defaults to `False`.

    `lstrip_blocks`
        If this is set to ``True`` leading spaces and tabs are stripped
        from the start of a line to a block.  Defaults to `False`.

    `newline_sequence`
        The sequence that starts a newline.  Must be one of ``'\r'``,
        ``'\n'`` or ``'\r\n'``.  The default is ``'\n'`` which is a
        useful default for Linux and OS X systems as well as web
        applications.

    `keep_trailing_newline`
        Preserve the trailing newline when rendering templates.
        The default is ``False``, which causes a single newline,
        if present, to be stripped from the end of the template.

        .. versionadded:: 2.7

    `extensions`
        List of Jinja extensions to use.  This can either be import paths
        as strings or extension classes.  For more information have a
        look at :ref:`the extensions documentation <jinja-extensions>`.

    `optimized`
        should the optimizer be enabled?  Default is ``True``.

    `undefined`
        :class:`Undefined` or a subclass of it that is used to represent
        undefined values in the template.

    `finalize`
        A callable that can be used to process the result of a variable
        expression before it is output.  For example one can convert
        ``None`` implicitly into an empty string here.

    `autoescape`
        If set to ``True`` the XML/HTML autoescaping feature is enabled by
        default.  For more details about autoescaping see
        :class:`~jinja2.utils.Markup`.  As of Jinja 2.4 this can also
        be a callable that is passed the template name and has to
        return ``True`` or ``False`` depending on autoescape should be
        enabled by default.

        .. versionchanged:: 2.4
           `autoescape` can now be a function

    `loader`
        The template loader for this environment.

    `cache_size`
        The size of the cache.  Per default this is ``400`` which means
        that if more than 400 templates are loaded the loader will clean
        out the least recently used template.  If the cache size is set to
        ``0`` templates are recompiled all the time, if the cache size is
        ``-1`` the cache will not be cleaned.

        .. versionchanged:: 2.8
           The cache size was increased to 400 from a low 50.

    `auto_reload`
        Some loaders load templates from locations where the template
        sources may change (ie: file system or database).  If
        ``auto_reload`` is set to ``True`` (default) every time a template is
        requested the loader checks if the source changed and if yes, it
        will reload the template.  For higher performance it's possible to
        disable that.

    `bytecode_cache`
        If set to a bytecode cache object, this object will provide a
        cache for the internal Jinja bytecode so that templates don't
        have to be parsed if they were not changed.

        See :ref:`bytecode-cache` for more information.

    `enable_async`
        If set to true this enables async template execution which allows
        you to take advantage of newer Python features.  This requires
        Python 3.6 or later.","It contains
important shared variables like configuration, filters, tests,
globals and others.  Instances of this class may be modified if
they are not shared and if no template was loaded so far.
Modifications on environments after the first template was loaded
will lead to surprising effects and undefined behavior.","        .. versionadded:: 2.2
        .. versionadded:: 2.7",,,"Modifications on environments after the first template was loaded
will lead to surprising effects and undefined behavior.",        See :ref:`bytecode-cache` for more information.,,"Modifications on environments after the first template was loaded
will lead to surprising effects and undefined behavior.",,,,,,,
E3,,E4 (disagree),,Markup,"
A string that is ready to be safely inserted into an HTML or XML
document, either because it was escaped or because it was marked
safe.

Passing an object to the constructor converts it to text and wraps
it to mark it safe without escaping. To escape the text, use the
:meth:`escape` class method instead.

>>> Markup('Hello, <em>World</em>!')
Markup('Hello, <em>World</em>!')
>>> Markup(42)
Markup('42')
>>> Markup.escape('Hello, <em>World</em>!')
Markup('Hello &lt;em&gt;World&lt;/em&gt;!')

This implements the ``__html__()`` interface that some frameworks
use. Passing an object that implements ``__html__()`` will wrap the
output of that method, marking it safe.

>>> class Foo:
...     def __html__(self):
...         return '<a href=""/foo"">foo</a>'
...
>>> Markup(Foo())
Markup('<a href=""/foo"">foo</a>')

This is a subclass of the text type (``str`` in Python 3,
``unicode`` in Python 2). It has the same methods as that type, but
all methods escape their arguments and return a ``Markup`` instance.

>>> Markup('<em>%s</em>') % 'foo & bar'
Markup('<em>foo &amp; bar</em>')
>>> Markup('<em>Hello</em> ') + '<foo>'
Markup('<em>Hello</em> &lt;foo&gt;')",34,"A string that is ready to be safely inserted into an HTML or XML
document, either because it was escaped or because it was marked
safe.","To escape the text, use the
:meth:`escape` class method instead.

>>> Markup('Hello, <em>World</em>!')
Markup('Hello, <em>World</em>!')
>>> Markup(42)
Markup('42')
>>> Markup.escape('Hello, <em>World</em>!')
Markup('Hello &lt;em&gt;World&lt;/em&gt;!')
This implements the ``__html__()`` interface that some frameworks
use. Passing an object that implements ``__html__()`` will wrap the
output of that method, marking it safe.

>>> class Foo:
...     def __html__(self):
...         return '<a href=""/foo"">foo</a>'
...
>>> Markup(Foo())
Markup('<a href=""/foo"">foo</a>')

This is a subclass of the text type (``str`` in Python 3,
``unicode`` in Python 2). It has the same methods as that type, but
all methods escape their arguments and return a ``Markup`` instance.

>>> Markup('<em>%s</em>') % 'foo & bar'
Markup('<em>foo &amp; bar</em>')
>>> Markup('<em>Hello</em> ') + '<foo>'
Markup('<em>Hello</em> &lt;foo&gt;')","Passing an object to the constructor converts it to text and wraps
it to mark it safe without escaping. To escape the text, use the
:meth:`escape` class method instead.","Passing an object to the constructor converts it to text and wraps
it to mark it safe without escaping. To escape the text, use the
:meth:`escape` class method instead.",,">>> Markup('Hello, <em>World</em>!')
Markup('Hello, <em>World</em>!')
>>> Markup(42)
Markup('42')
>>> Markup.escape('Hello, <em>World</em>!')
Markup('Hello &lt;em&gt;World&lt;/em&gt;!')
This implements the ``__html__()`` interface that some frameworks
use. Passing an object that implements ``__html__()`` will wrap the
output of that method, marking it safe.

>>> class Foo:
...     def __html__(self):
...         return '<a href=""/foo"">foo</a>'
...
>>> Markup(Foo())
Markup('<a href=""/foo"">foo</a>')

This is a subclass of the text type (``str`` in Python 3,
``unicode`` in Python 2). It has the same methods as that type, but
all methods escape their arguments and return a ``Markup`` instance.

>>> Markup('<em>%s</em>') % 'foo & bar'
Markup('<em>foo &amp; bar</em>')
>>> Markup('<em>Hello</em> ') + '<foo>'
Markup('<em>Hello</em> &lt;foo&gt;')",,,,,,,,,,,"This is a subclass of the text type (``str`` in Python 3,
``unicode`` in Python 2). It has the same methods as that type, but
all methods escape their arguments and return a ``Markup`` instance.",
E2,,E3 (agree),,omdict,"
Ordered Multivalue Dictionary.

A multivalue dictionary is a dictionary that can store multiple values per
key. An ordered multivalue dictionary is a multivalue dictionary that
retains the order of insertions and deletions.

Internally, items are stored in a doubly linked list, self._items. A
dictionary, self._map, is also maintained and stores an ordered list of
linked list node references, one for each value associated with that key.

Standard dict methods interact with the first value associated with a given
key. This means that omdict retains method parity with dict, and a dict
object can be replaced with an omdict object and all interaction will
behave identically. All dict methods that retain parity with omdict are:

  get(), setdefault(), pop(), popitem(),
  clear(), copy(), update(), fromkeys(), len()
  __getitem__(), __setitem__(), __delitem__(), __contains__(),
  items(), keys(), values(), iteritems(), iterkeys(), itervalues(),

Optional parameters have been added to some dict methods, but because the
added parameters are optional, existing use remains unaffected. An optional
<key> parameter has been added to these methods:

  items(), values(), iteritems(), itervalues()

New methods have also been added to omdict. Methods with 'list' in their
name interact with lists of values, and methods with 'all' in their name
interact with all items in the dictionary, including multiple items with
the same key.

The new omdict methods are:

  load(), size(), reverse(),
  getlist(), add(), addlist(), set(), setlist(), setdefaultlist(),
  poplist(), popvalue(), popvalues(), popitem(), poplistitem(),
  allitems(), allkeys(), allvalues(), lists(), listitems(),
  iterallitems(), iterallkeys(), iterallvalues(), iterlists(),
    iterlistitems()

Explanations and examples of the new methods above can be found in the
function comments below and online at

  https://github.com/gruns/orderedmultidict

Additional omdict information and documentation can also be found at the
above url.",48,"Ordered Multivalue Dictionary.

A multivalue dictionary is a dictionary that can store multiple values per
key. An ordered multivalue dictionary is a multivalue dictionary that
retains the order of insertions and deletions.
","
  get(), setdefault(), pop(), popitem(),
  clear(), copy(), update(), fromkeys(), len()
  __getitem__(), __setitem__(), __delitem__(), __contains__(),
  items(), keys(), values(), iteritems(), iterkeys(), itervalues(),

Optional parameters have been added to some dict methods, but because the
added parameters are optional, existing use remains unaffected. An optional
<key> parameter has been added to these methods:

  items(), values(), iteritems(), itervalues()

New methods have also been added to omdict. Methods with 'list' in their
name interact with lists of values, and methods with 'all' in their name
interact with all items in the dictionary, including multiple items with
the same key.

The new omdict methods are:

  load(), size(), reverse(),
  getlist(), add(), addlist(), set(), setlist(), setdefaultlist(),
  poplist(), popvalue(), popvalues(), popitem(), poplistitem(),
  allitems(), allkeys(), allvalues(), lists(), listitems(),
  iterallitems(), iterallkeys(), iterallvalues(), iterlists(),
    iterlistitems()

",,"
Internally, items are stored in a doubly linked list, self._items. A
dictionary, self._map, is also maintained and stores an ordered list of
linked list node references, one for each value associated with that key.

Standard dict methods interact with the first value associated with a given
key. This means that omdict retains method parity with dict, and a dict
object can be replaced with an omdict object and all interaction will
behave identically. All dict methods that retain parity with omdict are:
",,,,,"Explanations and examples of the new methods above can be found in the
function comments below and online at

  https://github.com/gruns/orderedmultidict

Additional omdict information and documentation can also be found at the
above url.",,,,,,,,,
E2,,E4 (disagree),,Path,"
The path type is similar to the :class:`File` type but it performs
different checks.  First of all, instead of returning an open file
handle it returns just the filename.  Secondly, it can perform various
basic checks about what the file or directory should be.

.. versionchanged:: 6.0
   `allow_dash` was added.

:param exists: if set to true, the file or directory needs to exist for
               this value to be valid.  If this is not required and a
               file does indeed not exist, then all further checks are
               silently skipped.
:param file_okay: controls if a file is a possible value.
:param dir_okay: controls if a directory is a possible value.
:param writable: if true, a writable check is performed.
:param readable: if true, a readable check is performed.
:param resolve_path: if this is true, then the path is fully resolved
                     before the value is passed onwards.  This means
                     that it's absolute and symlinks are resolved.  It
                     will not expand a tilde-prefix, as this is
                     supposed to be done by the shell only.
:param allow_dash: If this is set to `True`, a single dash to indicate
                   standard streams is permitted.
:param path_type: optionally a string type that should be used to
                  represent the path.  The default is `None` which
                  means the return value will be either bytes or
                  unicode depending on what makes most sense given the
                  input data Click deals with.",29,"
The path type is similar to the :class:`File` type but it performs
different checks.  ",,"
:param exists: if set to true, the file or directory needs to exist for
               this value to be valid.  If this is not required and a
               file does indeed not exist, then all further checks are
               silently skipped.
:param file_okay: controls if a file is a possible value.
:param dir_okay: controls if a directory is a possible value.
:param writable: if true, a writable check is performed.
:param readable: if true, a readable check is performed.
:param resolve_path: if this is true, then the path is fully resolved
                     before the value is passed onwards.  This means
                     that it's absolute and symlinks are resolved.  It
                     will not expand a tilde-prefix, as this is
                     supposed to be done by the shell only.
:param allow_dash: If this is set to `True`, a single dash to indicate
                   standard streams is permitted.
:param path_type: optionally a string type that should be used to
                  represent the path.  The default is `None` which
                  means the return value will be either bytes or
                  unicode depending on what makes most sense given the
                  input data Click deals with.",,"
.. versionchanged:: 6.0
   `allow_dash` was added.
","First of all, instead of returning an open file
handle it returns just the filename.  Secondly, it can perform various
basic checks about what the file or directory should be.",,,,,,,,,,,,
E4,E1 (agree),,,Context,"
The template context holds the variables of a template.  It stores the
values passed to the template and also the names the template exports.
Creating instances is neither supported nor useful as it's created
automatically at various stages of the template evaluation and should not
be created by hand.

The context is immutable.  Modifications on :attr:`parent` **must not**
happen and modifications on :attr:`vars` are allowed from generated
template code only.  Template filters and global functions marked as
:func:`contextfunction`\s get the active context passed as first argument
and are allowed to access the context read-only.

The template context supports read only dict operations (`get`,
`keys`, `values`, `items`, `iterkeys`, `itervalues`, `iteritems`,
`__getitem__`, `__contains__`).  Additionally there is a :meth:`resolve`
method that doesn't fail with a `KeyError` but returns an
:class:`Undefined` object for missing variables.",18,The template context holds the variables of a template.,"It stores the values passed to the template and also the names the template exports.

Modifications on :attr:`parent` **must not**
happen and modifications on :attr:`vars` are allowed from generated
template code only.  Template filters and global functions marked as
:func:`contextfunction`\s get the active context passed as first argument
and are allowed to access the context read-only.","Modifications on :attr:`parent` **must not**
happen and modifications on :attr:`vars` are allowed from generated
template code only.  Template filters and global functions marked as
:func:`contextfunction`\s get the active context passed as first argument
and are allowed to access the context read-only.

The template context supports read only dict operations (`get`,
`keys`, `values`, `items`, `iterkeys`, `itervalues`, `iteritems`,
`__getitem__`, `__contains__`).

Additionally there is a :meth:`resolve`
method that doesn't fail with a `KeyError` but returns an
:class:`Undefined` object for missing variables.",,,"Creating instances is neither supported nor useful as it's created
automatically at various stages of the template evaluation and should not
be created by hand.

The context is immutable.",,,,,"Creating instances is neither supported nor useful as it's created
automatically at various stages of the template evaluation and should not
be created by hand.",,,,,,,
E4,,E3 (disagree),,CaseInsensitiveDict,"
A case-insensitive ``dict``-like object.

Implements all methods and operations of
``MutableMapping`` as well as dict's ``copy``. Also
provides ``lower_items``.

All keys are expected to be strings. The structure remembers the
case of the last key to be set, and ``iter(instance)``,
``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
will contain case-sensitive keys. However, querying and contains
testing is case insensitive::

    cid = CaseInsensitiveDict()
    cid['Accept'] = 'application/json'
    cid['aCCEPT'] == 'application/json'  # True
    list(cid) == ['Accept']  # True

For example, ``headers['content-encoding']`` will return the
value of a ``'Content-Encoding'`` response header, regardless
of how the header name was originally stored.

If the constructor, ``.update``, or equality comparison
operations are given keys that have equal ``.lower()``s, the
behavior is undefined.",25,"A case-insensitive ``dict``-like object.

Implements all methods and operations of
``MutableMapping`` as well as dict's ``copy``. Also
provides ``lower_items``.","However, querying and contains
testing is case insensitive::

    cid = CaseInsensitiveDict()
    cid['Accept'] = 'application/json'
    cid['aCCEPT'] == 'application/json'  # True
    list(cid) == ['Accept']  # True

For example, ``headers['content-encoding']`` will return the
value of a ``'Content-Encoding'`` response header, regardless
of how the header name was originally stored.

If the constructor, ``.update``, or equality comparison
operations are given keys that have equal ``.lower()``s, the
behavior is undefined.",,"All keys are expected to be strings. The structure remembers the
case of the last key to be set, and ``iter(instance)``,
``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
will contain case-sensitive keys.",,"All keys are expected to be strings.

The structure remembers the
case of the last key to be set, and ``iter(instance)``,
``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
will contain case-sensitive keys. ",,,,,,,,,,,,
E1,,E4 (agree),,MemcachedBytecodeCache,"
This class implements a bytecode cache that uses a memcache cache for
storing the information.  It does not enforce a specific memcache library
(tummy's memcache or cmemcache) but will accept any class that provides
the minimal interface required.

Libraries compatible with this class:

-   `werkzeug <http://werkzeug.pocoo.org/>`_.contrib.cache
-   `python-memcached <https://www.tummy.com/Community/software/python-memcached/>`_
-   `cmemcache <http://gijsbert.org/cmemcache/>`_

(Unfortunately the django cache interface is not compatible because it
does not support storing binary data, only unicode.  You can however pass
the underlying cache client to the bytecode cache which is available
as `django.core.cache.cache._client`.)

The minimal interface for the client passed to the constructor is this:

.. class:: MinimalClientInterface

    .. method:: set(key, value[, timeout])

        Stores the bytecode in the cache.  `value` is a string and
        `timeout` the timeout of the key.  If timeout is not provided
        a default timeout or no timeout should be assumed, if it's
        provided it's an integer with the number of seconds the cache
        item should exist.

    .. method:: get(key)

        Returns the value for the cache key.  If the item does not
        exist in the cache the return value must be `None`.

The other arguments to the constructor are the prefix for all keys that
is added before the actual cache key and the timeout for the bytecode in
the cache system.  We recommend a high (or no) timeout.

This bytecode cache does not support clearing of used items in the cache.
The clear method is a no-operation function.

.. versionadded:: 2.7
   Added support for ignoring memcache errors through the
   `ignore_memcache_errors` parameter.",43,"This class implements a bytecode cache that uses a memcache cache for
storing the information. ","The minimal interface for the client passed to the constructor is this:

.. class:: MinimalClientInterface

    .. method:: set(key, value[, timeout])

        Stores the bytecode in the cache.  `value` is a string and
        `timeout` the timeout of the key.  If timeout is not provided
        a default timeout or no timeout should be assumed, if it's
        provided it's an integer with the number of seconds the cache
        item should exist.

    .. method:: get(key)

        Returns the value for the cache key.  If the item does not
        exist in the cache the return value must be `None`.

The other arguments to the constructor are the prefix for all keys that
is added before the actual cache key and the timeout for the bytecode in
the cache system.  We recommend a high (or no) timeout.
",,"It does not enforce a specific memcache library
(tummy's memcache or cmemcache) but will accept any class that provides
the minimal interface required.
",".. versionadded:: 2.7
   Added support for ignoring memcache errors through the
   `ignore_memcache_errors` parameter.",,,,,,"Libraries compatible with this class:

-   `werkzeug <http://werkzeug.pocoo.org/>`_.contrib.cache
-   `python-memcached <https://www.tummy.com/Community/software/python-memcached/>`_
-   `cmemcache <http://gijsbert.org/cmemcache/>`_

(Unfortunately the django cache interface is not compatible because it
does not support storing binary data, only unicode.  You can however pass
the underlying cache client to the bytecode cache which is available
as `django.core.cache.cache._client`.)
",,,,,,,
E1,E3 (agree with E4),E4 (disagree),,NotAny,"
Lookahead to disallow matching with the given parse expression.
``NotAny`` does *not* advance the parsing position within the
input string, it only verifies that the specified parse expression
does *not* match at the current position.  Also, ``NotAny`` does
*not* skip over leading whitespace. ``NotAny`` always returns
a null token list.  May be constructed using the '~' operator.

Example::

    AND, OR, NOT = map(CaselessKeyword, ""AND OR NOT"".split())

    # take care not to mistake keywords for identifiers
    ident = ~(AND | OR | NOT) + Word(alphas)
    boolean_term = Optional(NOT) + ident

    # very crude boolean expression - to support parenthesis groups and
    # operation hierarchy, use infixNotation
    boolean_expr = boolean_term + ZeroOrMore((AND | OR) + boolean_term)

    # integers that are followed by ""."" are actually floats
    integer = Word(nums) + ~Char(""."")",21,Lookahead to disallow matching with the given parse expression.,"`NotAny`` always returns
a null token list.  May be constructed using the '~' operator.

Example::

    AND, OR, NOT = map(CaselessKeyword, ""AND OR NOT"".split())

    # take care not to mistake keywords for identifiers
    ident = ~(AND | OR | NOT) + Word(alphas)
    boolean_term = Optional(NOT) + ident

    # very crude boolean expression - to support parenthesis groups and
    # operation hierarchy, use infixNotation
    boolean_expr = boolean_term + ZeroOrMore((AND | OR) + boolean_term)

    # integers that are followed by ""."" are actually floats
    integer = Word(nums) + ~Char(""."")",,"``NotAny`` does *not* advance the parsing position within the
input string, it only verifies that the specified parse expression
does *not* match at the current position.  Also, ``NotAny`` does
*not* skip over leading whitespace.",,,,,,,"``NotAny`` does *not* advance the parsing position within the
input string, it only verifies that the specified parse expression
does *not* match at the current position.  Also, ``NotAny`` does
*not* skip over leading whitespace. ``NotAny`` always returns
a null token list. ",,,,,,,
E3,,E4 (disagree),,FollowedBy,"
Lookahead matching of the given parse expression.
``FollowedBy`` does *not* advance the parsing position within
the input string, it only verifies that the specified parse
expression matches at the current position.  ``FollowedBy``
always returns a null token list. If any results names are defined
in the lookahead expression, those *will* be returned for access by
name.

Example::

    # use FollowedBy to match a label only if it is followed by a ':'
    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

    OneOrMore(attr_expr).parseString(""shape: SQUARE color: BLACK posn: upper left"").pprint()

prints::

    [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]",20,"Lookahead matching of the given parse expression.
``FollowedBy`` does *not* advance the parsing position within
the input string, it only verifies that the specified parse
expression matches at the current position.  ``FollowedBy``
always returns a null token list.
","``FollowedBy`` does *not* advance the parsing position within
the input string, it only verifies that the specified parse
expression matches at the current position.  ``FollowedBy``
always returns a null token list. If any results names are defined
in the lookahead expression, those *will* be returned for access by
name.

Example::

    # use FollowedBy to match a label only if it is followed by a ':'
    data_word = Word(alphas)
    label = data_word + FollowedBy(':')
    attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stopOn=label).setParseAction(' '.join))

    OneOrMore(attr_expr).parseString(""shape: SQUARE color: BLACK posn: upper left"").pprint()

prints::

    [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]",,"If any results names are defined
in the lookahead expression, those *will* be returned for access by
name.",,"``FollowedBy`` does *not* advance the parsing position within
the input string, it only verifies that the specified parse
expression matches at the current position.  ``FollowedBy``
always returns a null token list. If any results names are defined
in the lookahead expression, those *will* be returned for access by
name.",,,,,"``FollowedBy`` does *not* advance the parsing position within
the input string, it only verifies that the specified parse
expression matches at the current position.  ``FollowedBy``
always returns a null token list. If any results names are defined
in the lookahead expression, those *will* be returned for access by
name.",,,,,,,
E2,,E4 (disagree),,ParseResults,"
Structured parse results, to provide multiple means of access to
the parsed data:

   - as a list (``len(results)``)
   - by list index (``results[0], results[1]``, etc.)
   - by attribute (``results.<resultsName>`` - see :class:`ParserElement.setResultsName`)

Example::

    integer = Word(nums)
    date_str = (integer.setResultsName(""year"") + '/'
                    + integer.setResultsName(""month"") + '/'
                    + integer.setResultsName(""day""))
    # equivalent form:
    # date_str = integer(""year"") + '/' + integer(""month"") + '/' + integer(""day"")

    # parseString returns a ParseResults object
    result = date_str.parseString(""1999/12/31"")

    def test(s, fn=repr):
        print(""%s -> %s"" % (s, fn(eval(s))))
    test(""list(result)"")
    test(""result[0]"")
    test(""result['month']"")
    test(""result.day"")
    test(""'month' in result"")
    test(""'minutes' in result"")
    test(""result.dump()"", str)

prints::

    list(result) -> ['1999', '/', '12', '/', '31']
    result[0] -> '1999'
    result['month'] -> '12'
    result.day -> '31'
    'month' in result -> True
    'minutes' in result -> False
    result.dump() -> ['1999', '/', '12', '/', '31']
    - day: 31
    - month: 12
    - year: 1999",41,"

Structured parse results, to provide multiple means of access to
the parsed data:","
the parsed data:

   - as a list (``len(results)``)
   - by list index (``results[0], results[1]``, etc.)
   - by attribute (``results.<resultsName>`` - see :class:`ParserElement.setResultsName`)

Example::

    integer = Word(nums)
    date_str = (integer.setResultsName(""year"") + '/'
                    + integer.setResultsName(""month"") + '/'
                    + integer.setResultsName(""day""))
    # equivalent form:
    # date_str = integer(""year"") + '/' + integer(""month"") + '/' + integer(""day"")

    # parseString returns a ParseResults object
    result = date_str.parseString(""1999/12/31"")

    def test(s, fn=repr):
        print(""%s -> %s"" % (s, fn(eval(s))))
    test(""list(result)"")
    test(""result[0]"")
    test(""result['month']"")
    test(""result.day"")
    test(""'month' in result"")
    test(""'minutes' in result"")
    test(""result.dump()"", str)

prints::

    list(result) -> ['1999', '/', '12', '/', '31']
    result[0] -> '1999'
    result['month'] -> '12'
    result.day -> '31'
    'month' in result -> True
    'minutes' in result -> False
    result.dump() -> ['1999', '/', '12', '/', '31']
    - day: 31
    - month: 12
    - year: 1999",,,,"Example::

    integer = Word(nums)
    date_str = (integer.setResultsName(""year"") + '/'
                    + integer.setResultsName(""month"") + '/'
                    + integer.setResultsName(""day""))
    # equivalent form:
    # date_str = integer(""year"") + '/' + integer(""month"") + '/' + integer(""day"")

    # parseString returns a ParseResults object
    result = date_str.parseString(""1999/12/31"")

    def test(s, fn=repr):
        print(""%s -> %s"" % (s, fn(eval(s))))
    test(""list(result)"")
    test(""result[0]"")
    test(""result['month']"")
    test(""result.day"")
    test(""'month' in result"")
    test(""'minutes' in result"")
    test(""result.dump()"", str)",,,,,,,,,,,,
E4,,E3 (agree),,Session,"
A Requests session.

Provides cookie persistence, connection-pooling, and configuration.

Basic Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> s.get('https://httpbin.org/get')
  <Response [200]>

Or as a context manager::

  >>> with requests.Session() as s:
  >>>     s.get('https://httpbin.org/get')
  <Response [200]>",16,"A Requests session.

Provides cookie persistence, connection-pooling, and configuration.
","Basic Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> s.get('https://httpbin.org/get')
  <Response [200]>

Or as a context manager::

  >>> with requests.Session() as s:
  >>>     s.get('https://httpbin.org/get')
  <Response [200]>",,,,,,,,,,,,,,,,