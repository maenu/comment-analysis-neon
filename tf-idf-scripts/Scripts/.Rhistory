#install packages if not installed yet
if (!require(SnowballC)){ install.packages("tm") }
if (!require(lsa)){ install.packages("stringr") }
if (!require(stopwords)){ install.packages("stopwords") }
if (!require(stopwords)){ install.packages("slam") }
#load the libraries...
library(tm)
library(stringr)
library(stopwords)
install.packages("slam")
# @author sebastiano panichella
# @author annibale panichella
#install packages if not installed yet
if (!require(SnowballC)){ install.packages("tm") }
if (!require(lsa)){ install.packages("stringr") }
if (!require(stopwords)){ install.packages("stopwords") }
if (!require(stopwords)){ install.packages("slam") }
#load the libraries...
library(tm)
library(stringr)
library(stopwords)
library(slam)
# @author sebastiano panichella
# @author annibale panichella
#install packages if not installed yet
if (!require(SnowballC)){ install.packages("tm") }
if (!require(lsa)){ install.packages("stringr") }
if (!require(stopwords)){ install.packages("stopwords") }
if (!require(slam)){ install.packages("slam") }
install.packages("slam")
#install packages if not installed yet
if (!require(tm)){ install.packages("tm") }
if (!require(stringr)){ install.packages("stringr") }
if (!require(stopwords)){ install.packages("stopwords") }
if (!require(slam)){ install.packages("slam") }
#load the libraries...
library(tm)
library(stringr)
library(stopwords)
library(slam)
source('./utilities.R')
#path software artifacts
mydir1<-"../Datasets/traceability/iTrust/UC"
mydir2<-"../Datasets/traceability/iTrust/itrust_v10_code/iTrust/src"
# creating folders with pre-processed documents (e.g., camel case splitting, etc.)
mydir1_prepocessed <- "../Datasets/traceability/iTrust/pre-processed-UC"
mydir2_prepocessed <- "../Datasets/traceability/iTrust/pre-processed-CC"
output<-"./rankedlists/ranked_list.csv"
#
pre_processing(mydir1, mydir1_prepocessed, ".txt")
# @author sebastiano panichella
# @author annibale panichella
#install packages if not installed yet
if (!require(tm)){ install.packages("tm") }
if (!require(stringr)){ install.packages("stringr") }
if (!require(stopwords)){ install.packages("stopwords") }
if (!require(slam)){ install.packages("slam") }
#load the libraries...
library(tm)
library(stringr)
library(stopwords)
library(slam)
source('./utilities.R')
#path software artifacts
mydir1<-"../Datasets/traceability/iTrust/UC"
mydir2<-"../Datasets/traceability/iTrust/itrust_v10_code/iTrust/src"
# creating folders with pre-processed documents (e.g., camel case splitting, etc.)
mydir1_prepocessed <- "../Datasets/traceability/iTrust/pre-processed-UC"
mydir2_prepocessed <- "../Datasets/traceability/iTrust/pre-processed-CC"
output<-"./rankedlists/ranked_list.csv"
#
pre_processing(mydir1, mydir1_prepocessed, ".txt")
pre_processing(mydir2, mydir2_prepocessed, ".java")
output
#
pre_processing(mydir1, mydir1_prepocessed, ".txt")
if (!require(snakecase)){ install.packages("snakecase") }
if (!require(data.table)){ install.packages("data.table") }
if (!require(XML)){ install.packages("XML") }
source('./utilities.R')
#path software artifacts
mydir1<-"../Datasets/traceability/iTrust/UC"
mydir2<-"../Datasets/traceability/iTrust/itrust_v10_code/iTrust/src"
# creating folders with pre-processed documents (e.g., camel case splitting, etc.)
mydir1_prepocessed <- "../Datasets/traceability/iTrust/pre-processed-UC"
mydir2_prepocessed <- "../Datasets/traceability/iTrust/pre-processed-CC"
output<-"./rankedlists/ranked_list.csv"
#
pre_processing(mydir1, mydir1_prepocessed, ".txt")
pre_processing(mydir2, mydir2_prepocessed, ".java")
directories <- c(mydir1_prepocessed, mydir2_prepocessed)
tdm <- build_tm_matrix(directories)
# compute textual similarity
cosine_dist_mat <- crossprod_simple_triplet_matrix(tdm)/(sqrt(col_sums(tdm^2) %*% t(col_sums(tdm^2))))
tdm
# extract only the interesting part of the matrix
source_files <- list.files(mydir1_prepocessed, recursive=TRUE)
target_files <- list.files(mydir2_prepocessed, recursive=TRUE)
sub_matrix <- cosine_dist_mat[source_files, target_files]
sub_matrix
source_files
# build ranked-list
ranked_list <- build_ranked_list(sub_matrix)
ranked_list
# read the oracle
oracle_path <- paste(get_parent_folder(getwd()), "/Datasets/traceability/iTrust/answer_req_javacode.xml", sep="")
oracle <- read_oracle_from_xml(oracle_path)
oracle
